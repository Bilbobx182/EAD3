"use strict";
var tslib_1 = require("tslib");
var pg_1 = require("pg");
var pg_connection_string_1 = require("pg-connection-string");
var events_1 = require("events");
var postgraphile_core_1 = require("postgraphile-core");
var createPostGraphQLHttpRequestHandler_1 = require("./http/createPostGraphQLHttpRequestHandler");
var exportPostGraphQLSchema_1 = require("./schema/exportPostGraphQLSchema");
function postgraphql(poolOrConfig, schemaOrOptions, maybeOptions) {
    var schema;
    var options;
    // If the second argument is undefined, use defaults for both `schema` and
    // `options`.
    if (typeof schemaOrOptions === 'undefined') {
        schema = 'public';
        options = {};
    }
    else if (typeof schemaOrOptions === 'string' || Array.isArray(schemaOrOptions)) {
        schema = schemaOrOptions;
        options = maybeOptions || {};
    }
    else {
        schema = 'public';
        options = schemaOrOptions;
    }
    // Check for a jwtSecret without a jwtPgTypeIdentifier
    // a secret without a token identifier prevents JWT creation
    if (options.jwtSecret && !options.jwtPgTypeIdentifier) {
        // tslint:disable-next-line no-console
        console.warn('WARNING: jwtSecret provided, however jwtPgTypeIdentifier (token identifier) not provided.');
    }
    // Creates the Postgres schemas array.
    var pgSchemas = Array.isArray(schema) ? schema : [schema];
    // Do some things with `poolOrConfig` so that in the end, we actually get a
    // Postgres pool.
    var pgPool = 
    // If it is already a `Pool`, just use it.
    poolOrConfig instanceof pg_1.Pool || quacksLikePgPool(poolOrConfig)
        ? poolOrConfig
        : new pg_1.Pool(typeof poolOrConfig === 'string'
            ? pg_connection_string_1.parse(poolOrConfig)
            : poolOrConfig || {});
    var _emitter = new events_1.EventEmitter();
    // Creates a promise which will resolve to a GraphQL schema. Connects a
    // client from our pool to introspect the database.
    //
    // This is not a constant because when we are in watch mode, we want to swap
    // out the `gqlSchema`.
    var gqlSchema;
    var gqlSchemaPromise = createGqlSchema();
    // Finally create our Http request handler using our options, the Postgres
    // pool, and GraphQL schema. Return the final result.
    return createPostGraphQLHttpRequestHandler_1.default(Object.assign({}, options, {
        getGqlSchema: function () { return Promise.resolve(gqlSchema || gqlSchemaPromise); },
        pgPool: pgPool,
        _emitter: _emitter,
    }));
    function createGqlSchema() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (!options.watchPg) return [3 /*break*/, 2];
                        return [4 /*yield*/, postgraphile_core_1.watchPostGraphQLSchema(pgPool, pgSchemas, options, function (newSchema) {
                                gqlSchema = newSchema;
                                _emitter.emit('schemas:changed');
                                exportGqlSchema(gqlSchema);
                            })];
                    case 1:
                        _a.sent();
                        if (!gqlSchema) {
                            throw new Error('Consistency error: watchPostGraphQLSchema promises to call the callback before the promise resolves; but this hasn\'t happened');
                        }
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, postgraphile_core_1.createPostGraphQLSchema(pgPool, pgSchemas, options)];
                    case 3:
                        gqlSchema = _a.sent();
                        exportGqlSchema(gqlSchema);
                        _a.label = 4;
                    case 4: return [2 /*return*/, gqlSchema];
                    case 5:
                        error_1 = _a.sent();
                        return [2 /*return*/, handleFatalError(error_1)];
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    function exportGqlSchema(newGqlSchema) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var error_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, exportPostGraphQLSchema_1.default(newGqlSchema, options)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        handleFatalError(error_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = postgraphql;
function handleFatalError(error) {
    process.stderr.write(error.stack + "\n"); // console.error fails under the tests
    process.exit(1);
    // `process.exit` will mean all code below it will never get called.
    // However, we need to return a value with type `never` here for
    // TypeScript.
    return null;
}
function constructorName(obj) {
    return obj && typeof obj.constructor === 'function' && obj.constructor.name && String(obj.constructor.name) || null;
}
// tslint:disable-next-line no-any
function quacksLikePgPool(pgConfig) {
    // A diagnosis of exclusion
    if (!pgConfig || typeof pgConfig !== 'object')
        return false;
    if (constructorName(pgConfig) !== 'Pool' && constructorName(pgConfig) !== 'BoundPool')
        return false;
    if (!pgConfig['Client'])
        return false;
    if (!pgConfig['options'])
        return false;
    if (typeof pgConfig['connect'] !== 'function')
        return false;
    if (typeof pgConfig['end'] !== 'function')
        return false;
    if (typeof pgConfig['query'] !== 'function')
        return false;
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdGdyYXBocWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcG9zdGdyYXBocWwvcG9zdGdyYXBocWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBcUM7QUFDckMsNkRBQXVFO0FBRXZFLGlDQUFxQztBQUNyQyx1REFBbUY7QUFDbkYsa0dBQW9IO0FBQ3BILDRFQUFzRTtBQXlDdEUscUJBQ0UsWUFBeUMsRUFDekMsZUFBNkQsRUFDN0QsWUFBaUM7SUFFakMsSUFBSSxNQUE4QixDQUFBO0lBQ2xDLElBQUksT0FBMkIsQ0FBQTtJQUUvQiwwRUFBMEU7SUFDMUUsYUFBYTtJQUNiLEVBQUUsQ0FBQyxDQUFDLE9BQU8sZUFBZSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxHQUFHLFFBQVEsQ0FBQTtRQUNqQixPQUFPLEdBQUcsRUFBRSxDQUFBO0lBQ2QsQ0FBQztJQUlELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLGVBQWUsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0UsTUFBTSxHQUFHLGVBQWUsQ0FBQTtRQUN4QixPQUFPLEdBQUcsWUFBWSxJQUFJLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0lBR0QsSUFBSSxDQUFDLENBQUM7UUFDSixNQUFNLEdBQUcsUUFBUSxDQUFBO1FBQ2pCLE9BQU8sR0FBRyxlQUFlLENBQUE7SUFDM0IsQ0FBQztJQUVELHNEQUFzRDtJQUN0RCw0REFBNEQ7SUFDNUQsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDdEQsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkZBQTJGLENBQUMsQ0FBQTtJQUMzRyxDQUFDO0lBRUQsc0NBQXNDO0lBQ3RDLElBQU0sU0FBUyxHQUFrQixLQUFLLENB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