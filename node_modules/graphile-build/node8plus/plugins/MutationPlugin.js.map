{"version":3,"sources":["../../src/plugins/MutationPlugin.js"],"names":["MutationPlugin","builder","hook","schema","newWithHooks","extend","graphql","GraphQLObjectType","Mutation","name","description","isRootMutation","mutation"],"mappings":";;;;;;kBAGgB,eAAeA,cAAf,CAA8BC,OAA9B,EAAuC;AACrDA,UAAQC,IAAR,CACE,eADF,EAEE,CAACC,MAAD,EAAa,EAAEC,YAAF,EAAgBC,MAAhB,EAAwBC,SAAS,EAAEC,iBAAF,EAAjC,EAAb,KAA0E;AACxE,UAAMC,WAAWJ,aACfG,iBADe,EAEf;AACEE,YAAM,UADR;AAEEC,mBACE;AAHJ,KAFe,EAOf,EAAEC,gBAAgB,IAAlB,EAPe,EAQf,IARe,CAAjB;AAUA,QAAIH,QAAJ,EAAc;AACZ,aAAOH,OAAOF,MAAP,EAAe;AACpBS,kBAAUJ;AADU,OAAf,CAAP;AAGD,KAJD,MAIO;AACL,aAAOL,MAAP;AACD;AACF,GApBH;AAsBD,C","file":"MutationPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"../SchemaBuilder\";\n\nexport default (async function MutationPlugin(builder) {\n  builder.hook(\n    \"GraphQLSchema\",\n    (schema: {}, { newWithHooks, extend, graphql: { GraphQLObjectType } }) => {\n      const Mutation = newWithHooks(\n        GraphQLObjectType,\n        {\n          name: \"Mutation\",\n          description:\n            \"The root mutation type which contains root level fields which mutate data.\",\n        },\n        { isRootMutation: true },\n        true\n      );\n      if (Mutation) {\n        return extend(schema, {\n          mutation: Mutation,\n        });\n      } else {\n        return schema;\n      }\n    }\n  );\n}: Plugin);\n"]}