"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _freeze = require("babel-runtime/core-js/object/freeze");

var _freeze2 = _interopRequireDefault(_freeze);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _makeNewBuild = require("./makeNewBuild");

var _makeNewBuild2 = _interopRequireDefault(_makeNewBuild);

var _utils = require("./utils");

var _graphql = require("graphql");

var graphql = _interopRequireWildcard(_graphql);

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GraphQLSchema = graphql.GraphQLSchema;


var debug = (0, _debug2.default)("graphile-builder");

var INDENT = "  ";

var SchemaBuilder = function (_EventEmitter) {
  (0, _inherits3.default)(SchemaBuilder, _EventEmitter);

  function SchemaBuilder() {
    (0, _classCallCheck3.default)(this, SchemaBuilder);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SchemaBuilder.__proto__ || (0, _getPrototypeOf2.default)(SchemaBuilder)).call(this));

    _this._busy = false;
    _this._watching = false;

    _this.watchers = [];
    _this.unwatchers = [];

    // Because hooks can nest, this keeps track of how deep we are.
    _this.depth = -1;

    _this.hooks = {
      // The build object represents the current schema build and is passed to
      // all hooks, hook the 'build' event to extend this object:
      build: [],

      // 'build' phase should not generate any GraphQL objects (because the
      // build object isn't finalised yet so it risks weirdness occurring); so
      // if you need to set up any global types you can do so here.
      init: [],

      // Add 'query', 'mutation' or 'subscription' types in this hook:
      GraphQLSchema: [],

      // When creating a GraphQLObjectType via `newWithHooks`, we'll
      // execute, the following hooks:
      // - 'GraphQLObjectType' to add any root-level attributes, e.g. add a description
      // - 'GraphQLObjectType:interfaces' to add additional interfaces to this object type
      // - 'GraphQLObjectType:fields' to add additional fields to this object type (is
      //   ran asynchronously and gets a reference to the final GraphQL Object as
      //   `Self` in the context)
      // - 'GraphQLObjectType:fields:field' to customise an individual field from above
      // - 'GraphQLObjectType:fields:field:args' to customize the arguments to a field
      GraphQLObjectType: [],
      "GraphQLObjectType:interfaces": [],
      "GraphQLObjectType:fields": [],
      "GraphQLObjectType:fields:field": [],
      "GraphQLObjectType:fields:field:args": [],

      // When creating a GraphQLInputObjectType via `newWithHooks`, we'll
      // execute, the following hooks:
      // - 'GraphQLInputObjectType' to add any root-level attributes, e.g. add a description
      // - 'GraphQLInputObjectType:fields' to add additional fields to this object type (is
      //   ran asynchronously and gets a reference to the final GraphQL Object as
      //   `Self` in the context)
      // - 'GraphQLInputObjectType:fields:field' to customise an individual field from above
      GraphQLInputObjectType: [],
      "GraphQLInputObjectType:fields": [],
      "GraphQLInputObjectType:fields:field": [],

      // When creating a GraphQLEnumType via `newWithHooks`, we'll
      // execute, the following hooks:
      // - 'GraphQLEnumType' to add any root-level attributes, e.g. add a description
      // - 'GraphQLEnumType:values' to add additional values
      // - 'GraphQLEnumType:values:value' to change an individual value
      GraphQLEnumType: [],
      "GraphQLEnumType:values": [],
      "GraphQLEnumType:values:value": []
    };
    return _this;
  }

  (0, _createClass3.default)(SchemaBuilder, [{
    key: "_setPluginName",
    value: function _setPluginName(name) {
      this._currentPluginName = name;
    }

    /*
     * Every hook `fn` takes three arguments:
     * - obj - the object currently being inspected
     * - build - the current build object (which contains a number of utilities and the context of the build)
     * - context - information specific to the current invocation of the hook
     *
     * The function must either return a replacement object for `obj` or `obj` itself
     */

  }, {
    key: "hook",
    value: function hook(hookName, fn) {
      if (!this.hooks[hookName]) {
        throw new Error(`Sorry, '${hookName}' is not a supported hook`);
      }
      if (this._currentPluginName && !fn.displayName) {
        fn.displayName = `${this._currentPluginName}/${hookName}/${fn.displayName || fn.name || "anonymous"}`;
      }
      this.hooks[hookName].push(fn);
    }
  }, {
    key: "applyHooks",
    value: function applyHooks(build, hookName, input, context) {
      var debugStr = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";

      if (!input) {
        throw new Error("applyHooks was called with falsy input");
      }
      this.depth++;
      try {
        debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]: Running...`);

        var hooks = this.hooks[hookName];
        if (!hooks) {
          throw new Error(`Sorry, '${hookName}' is not a registered hook`);
        }

        var newObj = input;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3.default)(hooks), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var hook = _step.value;

            this.depth++;
            try {
              var hookDisplayName = hook.displayName || hook.name || "anonymous";
              debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]:   Executing '${hookDisplayName}'`);
              newObj = hook(newObj, build, context);
              if (!newObj) {
                throw new Error(`Hook '${hook.displayName || hook.name || "anonymous"}' for '${hookName}' returned falsy value '${newObj}'`);
              }
              debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]:   '${hookDisplayName}' complete`);
            } finally {
              this.depth--;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]: Complete`);

        return newObj;
      } finally {
        this.depth--;
      }
    }
  }, {
    key: "registerWatcher",
    value: function registerWatcher(listen, unlisten) {
      if (!listen || !unlisten) {
        throw new Error("You must provide both a listener and an unlistener");
      }
      this.watchers.push(listen);
      this.unwatchers.push(unlisten);
    }
  }, {
    key: "createBuild",
    value: function createBuild() {
      var initialBuild = (0, _makeNewBuild2.default)(this);
      var build = this.applyHooks(initialBuild, "build", initialBuild, {
        scope: {}
      });
      // Bind all functions so they can be dereferenced
      (0, _utils.bindAll)(build, (0, _keys2.default)(build).filter(function (key) {
        return typeof build[key] === "function";
      }));
      (0, _freeze2.default)(build);
      this.applyHooks(build, "init", {}, { scope: {} });
      return build;
    }
  }, {
    key: "buildSchema",
    value: function buildSchema() {
      if (!this._generatedSchema) {
        var _build = this.createBuild();
        this._generatedSchema = _build.newWithHooks(GraphQLSchema, {}, { isSchema: true });
      }
      if (!this._generatedSchema) {
        throw new Error("Schema generation failed");
      }
      return this._generatedSchema;
    }
  }, {
    key: "watchSchema",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(listener) {
        var _this2 = this;

        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _fn;

        return _regenerator2.default.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this._watching || this._busy)) {
                  _context2.next = 2;
                  break;
                }

                throw new Error("We're already watching this schema!");

              case 2:
                _context2.prev = 2;

                this._busy = true;
                this._watching = true;
                this._explicitSchemaListener = listener;
                this.triggerChange = function () {
                  _this2._generatedSchema = null;
                  // XXX: optionally debounce
                  _this2.emit("schema", _this2.buildSchema());
                };
                if (listener) {
                  this.on("schema", listener);
                }
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context2.prev = 11;
                _iterator2 = (0, _getIterator3.default)(this.watchers);

              case 13:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context2.next = 20;
                  break;
                }

                _fn = _step2.value;
                _context2.next = 17;
                return _fn(this.triggerChange);

              case 17:
                _iteratorNormalCompletion2 = true;
                _context2.next = 13;
                break;

              case 20:
                _context2.next = 26;
                break;

              case 22:
                _context2.prev = 22;
                _context2.t0 = _context2["catch"](11);
                _didIteratorError2 = true;
                _iteratorError2 = _context2.t0;

              case 26:
                _context2.prev = 26;
                _context2.prev = 27;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 29:
                _context2.prev = 29;

                if (!_didIteratorError2) {
                  _context2.next = 32;
                  break;
                }

                throw _iteratorError2;

              case 32:
                return _context2.finish(29);

              case 33:
                return _context2.finish(26);

              case 34:
                this.emit("schema", this.buildSchema());

              case 35:
                _context2.prev = 35;

                this._busy = false;
                return _context2.finish(35);

              case 38:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee, this, [[2,, 35, 38], [11, 22, 26, 34], [27,, 29, 33]]);
      }));

      function watchSchema(_x2) {
        return _ref.apply(this, arguments);
      }

      return watchSchema;
    }()
  }, {
    key: "unwatchSchema",
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var listener, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _fn2;

        return _regenerator2.default.wrap(function _callee2$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!this._watching || this._busy)) {
                  _context3.next = 2;
                  break;
                }

                throw new Error("We're not watching this schema!");

              case 2:
                this._busy = true;
                _context3.prev = 3;
                listener = this._explicitSchemaListener;

                this._explicitSchemaListener = null;
                if (listener) {
                  this.removeListener("schema", listener);
                }

                if (!this.triggerChange) {
                  _context3.next = 34;
                  break;
                }

                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context3.prev = 11;
                _iterator3 = (0, _getIterator3.default)(this.unwatchers);

              case 13:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context3.next = 20;
                  break;
                }

                _fn2 = _step3.value;
                _context3.next = 17;
                return _fn2(this.triggerChange);

              case 17:
                _iteratorNormalCompletion3 = true;
                _context3.next = 13;
                break;

              case 20:
                _context3.next = 26;
                break;

              case 22:
                _context3.prev = 22;
                _context3.t0 = _context3["catch"](11);
                _didIteratorError3 = true;
                _iteratorError3 = _context3.t0;

              case 26:
                _context3.prev = 26;
                _context3.prev = 27;

                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }

              case 29:
                _context3.prev = 29;

                if (!_didIteratorError3) {
                  _context3.next = 32;
                  break;
                }

                throw _iteratorError3;

              case 32:
                return _context3.finish(29);

              case 33:
                return _context3.finish(26);

              case 34:
                this.triggerChange = null;
                this._watching = false;

              case 36:
                _context3.prev = 36;

                this._busy = false;
                return _context3.finish(36);

              case 39:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee2, this, [[3,, 36, 39], [11, 22, 26, 34], [27,, 29, 33]]);
      }));

      function unwatchSchema() {
        return _ref2.apply(this, arguments);
      }

      return unwatchSchema;
    }()
  }]);
  return SchemaBuilder;
}(_events2.default);

exports.default = SchemaBuilder;
//# sourceMappingURL=SchemaBuilder.js.map