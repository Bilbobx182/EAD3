{"version":3,"sources":["../../src/plugins/StandardTypesPlugin.js"],"names":["StandardTypesPlugin","builder","hook","build","stringType","name","description","graphql","GraphQLScalarType","serialize","String","value","parseValue","parseLiteral","ast","kind","STRING","Error","Cursor","addType","_","newWithHooks","GraphQLNonNull","GraphQLObjectType","GraphQLBoolean","fields","fieldWithHooks","hasNextPage","addDataGenerator","calculateHasNextPage","type","isPageInfoHasNextPageField","hasPreviousPage","calculateHasPreviousPage","isPageInfoHasPreviousPageField","isPageInfo"],"mappings":";;;;;;AAEA;;kBAEgB,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AACpD;AACAA,UAAQC,IAAR,CAAa,OAAb,EAAsB,UAACC,KAAD,EAAyB;AAC7C,QAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOC,WAAP;AAAA,aACjB,IAAIH,MAAMI,OAAN,CAAcC,iBAAlB,CAAoC;AAClCH,YADkC;AAElCC,mBAFkC;AAGlCG,mBAAW;AAAA,iBAASC,OAAOC,KAAP,CAAT;AAAA,SAHuB;AAIlCC,oBAAY;AAAA,iBAASF,OAAOC,KAAP,CAAT;AAAA,SAJsB;AAKlCE,sBAAc,2BAAO;AACnB,cAAIC,IAAIC,IAAJ,KAAa,eAAKC,MAAtB,EAA8B;AAC5B,kBAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;AACD,iBAAOH,IAAIH,KAAX;AACD;AAViC,OAApC,CADiB;AAAA,KAAnB;;AAcA,QAAMO,SAASd,WACb,QADa,EAEb,sEAFa,CAAf;AAIAD,UAAMgB,OAAN,CAAcD,MAAd;AACA,WAAOf,KAAP;AACD,GArBD;AAsBAF,UAAQC,IAAR,CACE,MADF,EAEE,UACEkB,CADF,QAMK;AAAA,QAHDC,YAGC,QAHDA,YAGC;AAAA,4BAFDd,OAEC;AAAA,QAFUe,cAEV,gBAFUA,cAEV;AAAA,QAF0BC,iBAE1B,gBAF0BA,iBAE1B;AAAA,QAF6CC,cAE7C,gBAF6CA,cAE7C;;AACH;AACA;AACAH,iBACEE,iBADF,EAEE;AACElB,YAAM,UADR;AAEEC,mBAAa,+CAFf;AAGEmB,cAAQ;AAAA,YAAGC,cAAH,SAAGA,cAAH;AAAA,eAAyB;AAC/BC,uBAAaD,eACX,aADW,EAEX,iBAA0B;AAAA,gBAAvBE,gBAAuB,SAAvBA,gBAAuB;;AACxBA,6BAAiB,YAAM;AACrB,qBAAO;AACLC,sCAAsB;AADjB,eAAP;AAGD,aAJD;AAKA,mBAAO;AACLvB,2BACE,iDAFG;AAGLwB,oBAAM,IAAIR,cAAJ,CAAmBE,cAAnB;AAHD,aAAP;AAKD,WAbU,EAcX,EAAEO,4BAA4B,IAA9B,EAdW,CADkB;AAiB/BC,2BAAiBN,eACf,iBADe,EAEf,iBAA0B;AAAA,gBAAvBE,gBAAuB,SAAvBA,gBAAuB;;AACxBA,6BAAiB,YAAM;AACrB,qBAAO;AACLK,0CAA0B;AADrB,eAAP;AAGD,aAJD;AAKA,mBAAO;AACL3B,2BACE,kDAFG;AAGLwB,oBAAM,IAAIR,cAAJ,CAAmBE,cAAnB;AAHD,aAAP;AAKD,WAbc,EAcf,EAAEU,gCAAgC,IAAlC,EAde;AAjBc,SAAzB;AAAA;AAHV,KAFF,EAwCE;AACEC,kBAAY;AADd,KAxCF;AA4CA,WAAOf,CAAP;AACD,GAxDH;AA0DD,C","file":"StandardTypesPlugin.js","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\nimport { Kind } from \"graphql/language\";\n\nexport default (function StandardTypesPlugin(builder) {\n  // XXX: this should be in an \"init\" plugin, but PgTypesPlugin requires it in build - fix that, then fix this\n  builder.hook(\"build\", (build: Build): Build => {\n    const stringType = (name, description) =>\n      new build.graphql.GraphQLScalarType({\n        name,\n        description,\n        serialize: value => String(value),\n        parseValue: value => String(value),\n        parseLiteral: ast => {\n          if (ast.kind !== Kind.STRING) {\n            throw new Error(\"Can only parse string values\");\n          }\n          return ast.value;\n        },\n      });\n\n    const Cursor = stringType(\n      \"Cursor\",\n      \"A location in a connection that can be used for resuming pagination.\"\n    );\n    build.addType(Cursor);\n    return build;\n  });\n  builder.hook(\n    \"init\",\n    (\n      _: {},\n      {\n        newWithHooks,\n        graphql: { GraphQLNonNull, GraphQLObjectType, GraphQLBoolean },\n      }\n    ) => {\n      // https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo\n      /* const PageInfo = */\n      newWithHooks(\n        GraphQLObjectType,\n        {\n          name: \"PageInfo\",\n          description: \"Information about pagination in a connection.\",\n          fields: ({ fieldWithHooks }) => ({\n            hasNextPage: fieldWithHooks(\n              \"hasNextPage\",\n              ({ addDataGenerator }) => {\n                addDataGenerator(() => {\n                  return {\n                    calculateHasNextPage: true,\n                  };\n                });\n                return {\n                  description:\n                    \"When paginating forwards, are there more items?\",\n                  type: new GraphQLNonNull(GraphQLBoolean),\n                };\n              },\n              { isPageInfoHasNextPageField: true }\n            ),\n            hasPreviousPage: fieldWithHooks(\n              \"hasPreviousPage\",\n              ({ addDataGenerator }) => {\n                addDataGenerator(() => {\n                  return {\n                    calculateHasPreviousPage: true,\n                  };\n                });\n                return {\n                  description:\n                    \"When paginating backwards, are there more items?\",\n                  type: new GraphQLNonNull(GraphQLBoolean),\n                };\n              },\n              { isPageInfoHasPreviousPageField: true }\n            ),\n          }),\n        },\n        {\n          isPageInfo: true,\n        }\n      );\n      return _;\n    }\n  );\n}: Plugin);\n"]}