"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(builder) {
    return _regenerator2.default.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            builder.hook("build", function (build) {
              return build.extend(build, {
                $$isQuery: (0, _symbol2.default)("isQuery")
              }, `Extending Build`);
            });
            builder.hook("GraphQLSchema", function (schema, _ref2) {
              var $$isQuery = _ref2.$$isQuery,
                  newWithHooks = _ref2.newWithHooks,
                  extend = _ref2.extend,
                  _ref2$graphql = _ref2.graphql,
                  GraphQLObjectType = _ref2$graphql.GraphQLObjectType,
                  GraphQLNonNull = _ref2$graphql.GraphQLNonNull;

              var queryType = newWithHooks(GraphQLObjectType, {
                description: "The root query type which gives access points into the data universe.",
                name: "Query",
                isTypeOf: function isTypeOf(value, _context, info) {
                  return info.parentType == null || value === $$isQuery;
                },
                fields: function fields(_ref3) {
                  var Self = _ref3.Self;
                  return {
                    query: {
                      description: "Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.",
                      type: new GraphQLNonNull(Self),
                      resolve() {
                        return $$isQuery;
                      }
                    }
                  };
                }
              }, { isRootQuery: true }, true);
              if (queryType) {
                return extend(schema, {
                  query: queryType
                }, `Adding 'query' type to Schema`);
              } else {
                return schema;
              }
            });

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, this);
  }));

  function QueryPlugin(_x) {
    return _ref.apply(this, arguments);
  }

  return QueryPlugin;
}();
//# sourceMappingURL=QueryPlugin.js.map