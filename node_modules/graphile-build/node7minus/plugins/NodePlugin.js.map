{"version":3,"sources":["../../src/plugins/NodePlugin.js"],"names":["base64","Buffer","String","str","toString","base64Decode","NodePlugin","builder","inNodeIdFieldName","nodeIdFieldName","hook","build","nodeFetcherByTypeName","nodeAliasByTypeName","nodeTypeNameByAlias","extend","$$nodeType","getNodeIdForTypeAndIdentifiers","Type","identifiers","getNodeAlias","addNodeFetcherForTypeName","typeName","fetcher","Error","getNodeType","alias","getTypeByName","setNodeAlias","defineNodeInterfaceType","_","$$isQuery","newWithHooks","graphql","GraphQLNonNull","GraphQLID","GraphQLInterfaceType","getNullableType","name","description","resolveType","value","fields","type","addNodeIdToQuery","interfaces","isRootQuery","scope","parseResolveInfo","getNamedType","fieldWithHooks","resolve","node","getDataFromParsedResolveInfoFragment","args","data","context","resolveInfo","nodeId","JSON","parse","resolver","parsedResolveInfoFragment","resolveData","returnType","enumerable","configurable","isRootNodeField"],"mappings":"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","file":"NodePlugin.js","sourcesContent":["// @flow\nimport type {\n  Plugin,\n  Build,\n  DataForType,\n  Context,\n  ContextGraphQLObjectTypeFields,\n} from \"../SchemaBuilder\";\nimport type { ResolveTree } from \"graphql-parse-resolve-info\";\nimport type { GraphQLType, GraphQLInterfaceType } from \"graphql\";\nimport type { BuildExtensionQuery } from \"./QueryPlugin\";\n\nconst base64 = str => new Buffer(String(str)).toString(\"base64\");\nconst base64Decode = str => new Buffer(String(str), \"base64\").toString(\"utf8\");\n\nexport type NodeFetcher = (\n  data: mixed,\n  identifiers: Array<mixed>,\n  context: mixed,\n  parsedResolveInfoFragment: ResolveTree,\n  type: GraphQLType,\n  resolveData: DataForType\n) => {};\n\nexport type BuildExtensionNode = {|\n  nodeIdFieldName: string,\n  $$nodeType: Symbol,\n  nodeFetcherByTypeName: { [string]: NodeFetcher },\n  getNodeIdForTypeAndIdentifiers(\n    Type: GraphQLType,\n    ...identifiers: Array<mixed>\n  ): string,\n  addNodeFetcherForTypeName(typeName: string, fetcher: NodeFetcher): void,\n  getNodeAlias(typeName: string): string,\n  getNodeType(alias: string): GraphQLType,\n  setNodeAlias(typeName: string, alias: string): void,\n|};\n\nexport default (function NodePlugin(\n  builder,\n  { nodeIdFieldName: inNodeIdFieldName }\n) {\n  const nodeIdFieldName: string = inNodeIdFieldName\n    ? String(inNodeIdFieldName)\n    : \"id\";\n  builder.hook(\"build\", (build: Build): Build & BuildExtensionNode => {\n    const nodeFetcherByTypeName = {};\n    const nodeAliasByTypeName = {};\n    const nodeTypeNameByAlias = {};\n    return build.extend(\n      build,\n      {\n        nodeIdFieldName,\n        $$nodeType: Symbol(\"nodeType\"),\n        nodeFetcherByTypeName,\n        getNodeIdForTypeAndIdentifiers(Type, ...identifiers) {\n          return base64(\n            JSON.stringify([this.getNodeAlias(Type), ...identifiers])\n          );\n        },\n        addNodeFetcherForTypeName(typeName, fetcher) {\n          if (nodeFetcherByTypeName[typeName]) {\n            throw new Error(\"There's already a fetcher for this type\");\n          }\n          if (!fetcher) {\n            throw new Error(\"No fetcher specified\");\n          }\n          nodeFetcherByTypeName[typeName] = fetcher;\n        },\n        getNodeAlias(typeName) {\n          return nodeAliasByTypeName[typeName] || typeName;\n        },\n        getNodeType(alias) {\n          return this.getTypeByName(nodeTypeNameByAlias[alias] || alias);\n        },\n        setNodeAlias(typeName, alias) {\n          nodeAliasByTypeName[typeName] = alias;\n          nodeTypeNameByAlias[alias] = typeName;\n        },\n      },\n      `Adding 'Node' interface support to the Build`\n    );\n  });\n\n  builder.hook(\"init\", function defineNodeInterfaceType(\n    _: {},\n    {\n      $$isQuery,\n      $$nodeType,\n      getTypeByName,\n      newWithHooks,\n      graphql: {\n        GraphQLNonNull,\n        GraphQLID,\n        GraphQLInterfaceType,\n        getNullableType,\n      },\n    }: {| ...Build, ...BuildExtensionQuery, ...BuildExtensionNode |}\n  ) {\n    newWithHooks(\n      GraphQLInterfaceType,\n      {\n        name: \"Node\",\n        description: \"An object with a globally unique `ID`.\",\n        resolveType: value => {\n          if (value === $$isQuery) {\n            return getTypeByName(\"Query\");\n          } else if (value[$$nodeType]) {\n            return getNullableType(value[$$nodeType]);\n          }\n        },\n        fields: {\n          [nodeIdFieldName]: {\n            description:\n              \"A globally unique identifier. Can be used in various places throughout the system to identify this single value.\",\n            type: new GraphQLNonNull(GraphQLID),\n          },\n        },\n      },\n      {}\n    );\n    return _;\n  });\n\n  builder.hook(\"GraphQLObjectType:interfaces\", function addNodeIdToQuery(\n    interfaces: Array<GraphQLInterfaceType>,\n    { getTypeByName },\n    { scope: { isRootQuery } }\n  ) {\n    if (!isRootQuery) {\n      return interfaces;\n    }\n    const Type = getTypeByName(\"Node\");\n    if (Type) {\n      return [...interfaces, Type];\n    } else {\n      return interfaces;\n    }\n  });\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields: {},\n      {\n        $$isQuery,\n        $$nodeType,\n        parseResolveInfo,\n        getTypeByName,\n        extend,\n        nodeFetcherByTypeName,\n        getNodeType,\n        graphql: { GraphQLNonNull, GraphQLID, getNamedType },\n      }: {| ...Build, ...BuildExtensionQuery, ...BuildExtensionNode |},\n      {\n        scope: { isRootQuery },\n        fieldWithHooks,\n      }: {| ...Context, ...ContextGraphQLObjectTypeFields |}\n    ) => {\n      if (!isRootQuery) {\n        return fields;\n      }\n      return extend(\n        fields,\n        {\n          [nodeIdFieldName]: {\n            description:\n              \"The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\",\n            type: new GraphQLNonNull(GraphQLID),\n            resolve() {\n              return \"query\";\n            },\n          },\n          node: fieldWithHooks(\n            \"node\",\n            ({ getDataFromParsedResolveInfoFragment }) => ({\n              description: \"Fetches an object given its globally unique `ID`.\",\n              type: getTypeByName(\"Node\"),\n              args: {\n                [nodeIdFieldName]: {\n                  description: \"The globally unique `ID`.\",\n                  type: new GraphQLNonNull(GraphQLID),\n                },\n              },\n              async resolve(data, args, context, resolveInfo) {\n                const nodeId = args[nodeIdFieldName];\n                if (nodeId === \"query\") {\n                  return $$isQuery;\n                }\n                try {\n                  const [alias, ...identifiers] = JSON.parse(\n                    base64Decode(nodeId)\n                  );\n                  const Type = getNodeType(alias);\n                  if (!Type) {\n                    throw new Error(\"Type not found\");\n                  }\n                  const resolver =\n                    nodeFetcherByTypeName[getNamedType(Type).name];\n                  const parsedResolveInfoFragment = parseResolveInfo(\n                    resolveInfo,\n                    {},\n                    Type\n                  );\n                  const resolveData = getDataFromParsedResolveInfoFragment(\n                    parsedResolveInfoFragment,\n                    getNamedType(Type)\n                  );\n                  const node = await resolver(\n                    data,\n                    identifiers,\n                    context,\n                    parsedResolveInfoFragment,\n                    resolveInfo.returnType,\n                    resolveData\n                  );\n                  Object.defineProperty(node, $$nodeType, {\n                    enumerable: false,\n                    configurable: false,\n                    value: Type,\n                  });\n                  return node;\n                } catch (e) {\n                  return null;\n                }\n              },\n            }),\n            {\n              isRootNodeField: true,\n            }\n          ),\n        },\n        `Adding node helpers to the root Query`\n      );\n    }\n  );\n}: Plugin);\n"]}