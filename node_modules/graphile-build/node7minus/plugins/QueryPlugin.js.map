{"version":3,"sources":["../../src/plugins/QueryPlugin.js"],"names":["builder","hook","build","extend","$$isQuery","schema","newWithHooks","graphql","GraphQLObjectType","GraphQLNonNull","queryType","description","name","isTypeOf","value","_context","info","parentType","fields","Self","query","type","resolve","isRootQuery","QueryPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;sFAOgB,iBAA2BA,OAA3B;AAAA;AAAA;AAAA;AAAA;AACdA,oBAAQC,IAAR,CAAa,OAAb,EAAsB,UAACC,KAAD;AAAA,qBACpBA,MAAMC,MAAN,CACED,KADF,EAEE;AACEE,2BAAW,sBAAO,SAAP;AADb,eAFF,EAKG,iBALH,CADoB;AAAA,aAAtB;AASAJ,oBAAQC,IAAR,CACE,eADF,EAEE,UACEI,MADF,SAQK;AAAA,kBALDD,SAKC,SALDA,SAKC;AAAA,kBAJDE,YAIC,SAJDA,YAIC;AAAA,kBAHDH,MAGC,SAHDA,MAGC;AAAA,wCAFDI,OAEC;AAAA,kBAFUC,iBAEV,iBAFUA,iBAEV;AAAA,kBAF6BC,cAE7B,iBAF6BA,cAE7B;;AACH,kBAAMC,YAAYJ,aAChBE,iBADgB,EAEhB;AACEG,6BACE,uEAFJ;AAGEC,sBAAM,OAHR;AAIEC,0BAAU,kBAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB;AAAA,yBACRA,KAAKC,UAAL,IAAmB,IAAnB,IAA2BH,UAAUV,SAD7B;AAAA,iBAJZ;AAMEc,wBAAQ;AAAA,sBAAGC,IAAH,SAAGA,IAAH;AAAA,yBAAe;AACrBC,2BAAO;AACLT,mCACE,wJAFG;AAGLU,4BAAM,IAAIZ,cAAJ,CAAmBU,IAAnB,CAHD;AAILG,gCAAU;AACR,+BAAOlB,SAAP;AACD;AANI;AADc,mBAAf;AAAA;AANV,eAFgB,EAmBhB,EAAEmB,aAAa,IAAf,EAnBgB,EAoBhB,IApBgB,CAAlB;AAsBA,kBAAIb,SAAJ,EAAe;AACb,uBAAOP,OACLE,MADK,EAEL;AACEe,yBAAOV;AADT,iBAFK,EAKJ,+BALI,CAAP;AAOD,eARD,MAQO;AACL,uBAAOL,MAAP;AACD;AACF,aA5CH;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAemB,W;;;;SAAAA,W","file":"QueryPlugin.js","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\n\nexport type BuildExtensionQuery = {|\n  $$isQuery: Symbol,\n|};\n\nexport default (async function QueryPlugin(builder) {\n  builder.hook(\"build\", (build: Build): Build & BuildExtensionQuery =>\n    build.extend(\n      build,\n      {\n        $$isQuery: Symbol(\"isQuery\"),\n      },\n      `Extending Build`\n    )\n  );\n  builder.hook(\n    \"GraphQLSchema\",\n    (\n      schema: {},\n      {\n        $$isQuery,\n        newWithHooks,\n        extend,\n        graphql: { GraphQLObjectType, GraphQLNonNull },\n      }\n    ) => {\n      const queryType = newWithHooks(\n        GraphQLObjectType,\n        {\n          description:\n            \"The root query type which gives access points into the data universe.\",\n          name: \"Query\",\n          isTypeOf: (value, _context, info) =>\n            info.parentType == null || value === $$isQuery,\n          fields: ({ Self }) => ({\n            query: {\n              description:\n                \"Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.\",\n              type: new GraphQLNonNull(Self),\n              resolve() {\n                return $$isQuery;\n              },\n            },\n          }),\n        },\n        { isRootQuery: true },\n        true\n      );\n      if (queryType) {\n        return extend(\n          schema,\n          {\n            query: queryType,\n          },\n          `Adding 'query' type to Schema`\n        );\n      } else {\n        return schema;\n      }\n    }\n  );\n}: Plugin);\n"]}