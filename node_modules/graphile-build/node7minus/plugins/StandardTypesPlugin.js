"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _language = require("graphql/language");

exports.default = function StandardTypesPlugin(builder) {
  // XXX: this should be in an "init" plugin, but PgTypesPlugin requires it in build - fix that, then fix this
  builder.hook("build", function (build) {
    var stringType = function stringType(name, description) {
      return new build.graphql.GraphQLScalarType({
        name,
        description,
        serialize: function serialize(value) {
          return String(value);
        },
        parseValue: function parseValue(value) {
          return String(value);
        },
        parseLiteral: function parseLiteral(ast) {
          if (ast.kind !== _language.Kind.STRING) {
            throw new Error("Can only parse string values");
          }
          return ast.value;
        }
      });
    };

    var Cursor = stringType("Cursor", "A location in a connection that can be used for resuming pagination.");
    build.addType(Cursor);
    return build;
  });
  builder.hook("init", function (_, _ref) {
    var newWithHooks = _ref.newWithHooks,
        _ref$graphql = _ref.graphql,
        GraphQLNonNull = _ref$graphql.GraphQLNonNull,
        GraphQLObjectType = _ref$graphql.GraphQLObjectType,
        GraphQLBoolean = _ref$graphql.GraphQLBoolean;

    // https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
    /* const PageInfo = */
    newWithHooks(GraphQLObjectType, {
      name: "PageInfo",
      description: "Information about pagination in a connection.",
      fields: function fields(_ref2) {
        var fieldWithHooks = _ref2.fieldWithHooks;
        return {
          hasNextPage: fieldWithHooks("hasNextPage", function (_ref3) {
            var addDataGenerator = _ref3.addDataGenerator;

            addDataGenerator(function () {
              return {
                calculateHasNextPage: true
              };
            });
            return {
              description: "When paginating forwards, are there more items?",
              type: new GraphQLNonNull(GraphQLBoolean)
            };
          }, { isPageInfoHasNextPageField: true }),
          hasPreviousPage: fieldWithHooks("hasPreviousPage", function (_ref4) {
            var addDataGenerator = _ref4.addDataGenerator;

            addDataGenerator(function () {
              return {
                calculateHasPreviousPage: true
              };
            });
            return {
              description: "When paginating backwards, are there more items?",
              type: new GraphQLNonNull(GraphQLBoolean)
            };
          }, { isPageInfoHasPreviousPageField: true })
        };
      }
    }, {
      isPageInfo: true
    });
    return _;
  });
};
//# sourceMappingURL=StandardTypesPlugin.js.map