"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function ClientMutationIdDescriptionPlugin(builder) {
  builder.hook("GraphQLInputObjectType:fields:field", function (field, _ref, _ref2) {
    var extend = _ref.extend;
    var _ref2$scope = _ref2.scope,
        isMutationInput = _ref2$scope.isMutationInput,
        fieldName = _ref2$scope.fieldName,
        Self = _ref2.Self;

    if (!isMutationInput || fieldName !== "clientMutationId" || field.description) {
      return field;
    }
    if (!field || !Self) {
      debugger; // eslint-disable-line
    }
    return extend(field, {
      description: "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    }, `Tweaking '${field.name || ""}' field in '${Self.name}'`);
  });

  builder.hook("GraphQLObjectType:fields:field", function (field, _ref3, _ref4) {
    var extend = _ref3.extend;
    var _ref4$scope = _ref4.scope,
        isMutationPayload = _ref4$scope.isMutationPayload,
        fieldName = _ref4$scope.fieldName,
        Self = _ref4.Self;

    if (!isMutationPayload || fieldName !== "clientMutationId" || field.description) {
      return field;
    }
    if (!field || !Self) {
      debugger; // eslint-disable-line
    }
    return extend(field, {
      description: "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    }, `Tweaking '${field.name || ""}' field in '${Self.name}'`);
  });

  builder.hook("GraphQLObjectType:fields:field:args", function (args, _ref5, _ref6) {
    var extend = _ref5.extend;
    var isRootMutation = _ref6.scope.isRootMutation,
        Self = _ref6.Self,
        field = _ref6.field;

    if (!isRootMutation || !args.input || args.input.description) {
      return args;
    }
    if (!field || !Self) {
      debugger; // eslint-disable-line
    }
    return (0, _assign2.default)({}, args, {
      input: extend(args.input, {
        description: "The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields."
      }, `Adding a description to input arg for field '${field.name}' field in '${Self.name}'`)
    });
  });
};
//# sourceMappingURL=ClientMutationIdDescriptionPlugin.js.map