{"version":3,"sources":["../src/index.js"],"names":["getBuilder","plugins","options","builder","plugin","Error","inspect","_setPluginName","displayName","name","buildSchema","defaultPlugins","StandardTypesPlugin","NodePlugin","QueryPlugin","MutationPlugin","ClientMutationIdDescriptionPlugin","MutationPayloadQueryPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAwBO,IAAMA;AAAA,sFAAa,iBACxBC,OADwB;AAAA,QAExBC,OAFwB,uEAEL,EAFK;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIlBC,mBAJkB,GAIR,6BAJQ;AAAA;AAAA;AAAA;AAAA;AAAA,mDAKHF,OALG;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKbG,kBALa;;AAAA,kBAMlB,OAAOA,MAAP,KAAkB,UANA;AAAA;AAAA;AAAA;;AAAA,kBAOd,IAAIC,KAAJ,CACJ,iFACE,eAAKC,OAAL,CAAaF,MAAb,CAFE,CAPc;;AAAA;AAYtBD,oBAAQI,cAAR,CAAuBH,OAAOI,WAAP,IAAsBJ,OAAOK,IAApD;AAZsB;AAAA,mBAahBL,OAAOD,OAAP,EAAgBD,OAAhB,CAbgB;;AAAA;AActBC,oBAAQI,cAAR,CAAuB,IAAvB;;AAdsB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,6CAgBjBJ,OAhBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAmBA,IAAMO;AAAA,uFAAc,kBACzBT,OADyB;AAAA,QAEzBC,OAFyB,uEAEN,EAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIYF,WAAWC,OAAX,EAAoBC,OAApB,CAJZ;;AAAA;AAInBC,mBAJmB;AAAA,8CAKlBA,QAAQO,WAAR,EALkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAQA,IAAMC,0CAAgC,mLAAtC;;QAULC,mB;QACAC,U;QACAC,W;QACAC,c;QACAC,iC;QACAC,0B","file":"index.js","sourcesContent":["// @flow\n\nimport util from \"util\";\nimport SchemaBuilder from \"./SchemaBuilder\";\nimport {\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n} from \"./plugins\";\nimport type { GraphQLSchema } from \"graphql\";\n\nimport type { Plugin, Options } from \"./SchemaBuilder\";\n\nexport type {\n  Plugin,\n  Options,\n  Build,\n  BuildExtensionQuery,\n  Scope,\n  Context,\n  Hook,\n  WatchUnwatch,\n  SchemaListener,\n} from \"./SchemaBuilder\";\n\nexport const getBuilder = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<SchemaBuilder> => {\n  const builder = new SchemaBuilder();\n  for (const plugin of plugins) {\n    if (typeof plugin !== \"function\") {\n      throw new Error(\n        \"Expected a list of plugin functions, instead list contained a non-function: \" +\n          util.inspect(plugin)\n      );\n    }\n    builder._setPluginName(plugin.displayName || plugin.name);\n    await plugin(builder, options);\n    builder._setPluginName(null);\n  }\n  return builder;\n};\n\nexport const buildSchema = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<GraphQLSchema> => {\n  const builder: SchemaBuilder = await getBuilder(plugins, options);\n  return builder.buildSchema();\n};\n\nexport const defaultPlugins: Array<Plugin> = [\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n];\n\nexport {\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n};\n"]}