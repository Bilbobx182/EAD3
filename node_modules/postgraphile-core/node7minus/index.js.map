{"version":3,"sources":["../src/index.js"],"names":["ensureValidPlugins","name","arr","Array","isArray","Error","i","l","length","fn","inflections","postGraphQLBaseOverrides","enumName","value","defaultUtils","constantCase","defaultInflection","postGraphQLClassicIdsOverrides","column","_table","_schema","camelCase","postGraphQLInflection","newInflector","postGraphQLClassicIdsInflection","awaitKeys","obj","result","k","getPostGraphQLBuilder","pgConfig","schemas","options","dynamicJson","classicIds","nodeIdFieldName","replaceAllPlugins","appendPlugins","prependPlugins","skipPlugins","jwtPgTypeIdentifier","jwtSecret","disableDefaultMutations","graphileBuildOptions","graphqlBuildOptions","inflector","pgColumnFilter","viewUniqueKey","enableTags","readCache","writeCache","setWriteCacheCallback","persistentMemoizeWithKey","undefined","memoizeCache","JSON","resolve","reject","readFile","err","data","parse","key","then","writeFile","filter","indexOf","p","pgSchemas","pgExtendedTypes","pgInflection","pgJwtTypeIdentifier","pgJwtSecret","pgDisableDefaultMutations","pgViewUniqueKey","pgEnableTags","abort","e","console","error","process","exit","createPostGraphQLSchema","builder","schema","buildSchema","catch","watchPostGraphQLSchema","onNewSchema","handleNewSchema","released","watchSchema","unwatchSchema","release","postGraphileBaseOverrides","postGraphileClassicIdsOverrides","postGraphileInflection","postGraphileClassicIdsInflection","createPostGraphileSchema","watchPostGraphileSchema"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport fs from \"fs\";\nimport { defaultPlugins, getBuilder } from \"graphile-build\";\nimport {\n  defaultPlugins as pgDefaultPlugins,\n  inflections,\n  Inflector,\n} from \"graphile-build-pg\";\nimport type { Pool, Client } from \"pg\";\nimport type { Plugin, Options, SchemaListener } from \"graphile-build\";\nimport type { Build, Context } from \"graphile-build\";\n\nconst ensureValidPlugins = (name, arr) => {\n  if (!Array.isArray(arr)) {\n    throw new Error(`Option '${name}' should be an array`);\n  }\n  for (let i = 0, l = arr.length; i < l; i++) {\n    const fn = arr[i];\n    if (typeof fn !== \"function\") {\n      throw new Error(\n        `Option '${name}' should be an array of functions, found '${typeof fn}' at index ${i}`\n      );\n    }\n  }\n};\n\ntype PostGraphQLOptions = {\n  dynamicJson?: boolean,\n  classicIds?: boolean,\n  disableDefaultMutations?: string,\n  nodeIdFieldName?: string,\n  graphileBuildOptions?: Options,\n  graphqlBuildOptions?: Options, // DEPRECATED!\n  replaceAllPlugins?: Array<Plugin>,\n  appendPlugins?: Array<Plugin>,\n  prependPlugins?: Array<Plugin>,\n  skipPlugins?: Array<Plugin>,\n  jwtPgTypeIdentifier?: string,\n  jwtSecret?: string,\n  inflector?: Inflector,\n  pgColumnFilter?: (mixed, Build, Context) => boolean,\n  viewUniqueKey?: string,\n  enableTags?: boolean,\n  readCache?: string,\n  writeCache?: string,\n  setWriteCacheCallback?: (fn: () => Promise<void>) => void,\n};\n\ntype PgConfig = Client | Pool | string;\n\nexport { inflections };\n\nexport const postGraphQLBaseOverrides = {\n  enumName(value: string) {\n    return inflections.defaultUtils.constantCase(\n      inflections.defaultInflection.enumName(value)\n    );\n  },\n};\n\nexport const postGraphQLClassicIdsOverrides = {\n  column(name: string, _table: string, _schema: ?string) {\n    return name === \"id\" ? \"rowId\" : inflections.defaultUtils.camelCase(name);\n  },\n};\n\nexport const postGraphQLInflection = inflections.newInflector(\n  postGraphQLBaseOverrides\n);\nexport const postGraphQLClassicIdsInflection = inflections.newInflector(\n  Object.assign({}, postGraphQLBaseOverrides, postGraphQLClassicIdsOverrides)\n);\n\nconst awaitKeys = async obj => {\n  const result = {};\n  for (const k in obj) {\n    result[k] = await obj[k];\n  }\n  return result;\n};\n\nconst getPostGraphQLBuilder = async (\n  pgConfig,\n  schemas,\n  options: PostGraphQLOptions = {}\n) => {\n  const { dynamicJson, classicIds, nodeIdFieldName } = options;\n  const {\n    replaceAllPlugins,\n    appendPlugins = [],\n    prependPlugins = [],\n    skipPlugins = [],\n    jwtPgTypeIdentifier,\n    jwtSecret,\n    disableDefaultMutations,\n    graphileBuildOptions,\n    graphqlBuildOptions, // DEPRECATED!\n    inflector,\n    pgColumnFilter,\n    viewUniqueKey,\n    enableTags = true,\n    readCache,\n    writeCache,\n    setWriteCacheCallback,\n  } = options;\n  if (replaceAllPlugins) {\n    ensureValidPlugins(\"replaceAllPlugins\", replaceAllPlugins);\n    if (\n      (prependPlugins && prependPlugins.length) ||\n      (appendPlugins && appendPlugins.length)\n    ) {\n      throw new Error(\n        \"When using 'replaceAllPlugins' you must not specify 'appendPlugins'/'prependPlugins'\"\n      );\n    }\n  }\n  if (readCache && writeCache) {\n    throw new Error(\"Use `readCache` or `writeCache` - not both.\");\n  }\n\n  let persistentMemoizeWithKey = undefined; // NOT null, otherwise it won't default correctly.\n  let memoizeCache = {};\n\n  if (readCache) {\n    memoizeCache = JSON.parse(\n      await new Promise((resolve, reject) => {\n        fs.readFile(readCache, \"utf8\", (err, data) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        });\n      })\n    );\n  }\n  if (readCache || writeCache) {\n    persistentMemoizeWithKey = (key, fn) => {\n      if (!(key in memoizeCache)) {\n        if (readCache) {\n          throw new Error(`Expected cache to contain key: ${key}`);\n        }\n        memoizeCache[key] = fn();\n        if (memoizeCache[key] === undefined) {\n          throw new Error(`Cannot memoize 'undefined' - use 'null' instead`);\n        }\n      }\n      return memoizeCache[key];\n    };\n  }\n\n  if (writeCache && setWriteCacheCallback) {\n    setWriteCacheCallback(() =>\n      awaitKeys(memoizeCache).then(\n        obj =>\n          new Promise((resolve, reject) => {\n            fs.writeFile(writeCache, JSON.stringify(obj), err => {\n              memoizeCache = {};\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          })\n      )\n    );\n  } else if (writeCache) {\n    throw new Error(\"Cannot write cache without 'setWriteCacheCallback'\");\n  } else if (setWriteCacheCallback) {\n    setWriteCacheCallback(() => Promise.resolve());\n  }\n\n  ensureValidPlugins(\"prependPlugins\", prependPlugins);\n  ensureValidPlugins(\"appendPlugins\", appendPlugins);\n  ensureValidPlugins(\"skipPlugins\", skipPlugins);\n  return getBuilder(\n    (replaceAllPlugins\n      ? [...prependPlugins, ...replaceAllPlugins, ...appendPlugins]\n      : [\n          ...prependPlugins,\n          ...defaultPlugins,\n          ...pgDefaultPlugins,\n          ...appendPlugins,\n        ]\n    ).filter(p => skipPlugins.indexOf(p) === -1),\n    Object.assign(\n      {\n        pgConfig: pgConfig,\n        pgSchemas: Array.isArray(schemas) ? schemas : [schemas],\n        pgExtendedTypes: !!dynamicJson,\n        pgColumnFilter: pgColumnFilter || (() => true),\n        pgInflection:\n          inflector ||\n          (classicIds\n            ? postGraphQLClassicIdsInflection\n            : postGraphQLInflection),\n        nodeIdFieldName: nodeIdFieldName || (classicIds ? \"id\" : \"nodeId\"),\n        pgJwtTypeIdentifier: jwtPgTypeIdentifier,\n        pgJwtSecret: jwtSecret,\n        pgDisableDefaultMutations: disableDefaultMutations,\n        pgViewUniqueKey: viewUniqueKey,\n        pgEnableTags: enableTags,\n        persistentMemoizeWithKey,\n      },\n      graphileBuildOptions,\n      graphqlBuildOptions // DEPRECATED!\n    )\n  );\n};\n\nfunction abort(e) {\n  /* eslint-disable no-console */\n  console.error(\"Error occured whilst writing cache\");\n  console.error(e);\n  process.exit(1);\n  /* eslint-enable */\n}\n\nexport const createPostGraphQLSchema = async (\n  pgConfig: PgConfig,\n  schemas: Array<string> | string,\n  options: PostGraphQLOptions = {}\n) => {\n  let writeCache;\n  const builder = await getPostGraphQLBuilder(\n    pgConfig,\n    schemas,\n    Object.assign({}, options, {\n      setWriteCacheCallback(fn) {\n        writeCache = fn;\n      },\n    })\n  );\n  const schema = builder.buildSchema();\n  if (writeCache) writeCache().catch(abort);\n  return schema;\n};\n\n/*\n * Unless an error occurs, `onNewSchema` is guaranteed to be called before this promise resolves\n */\nexport const watchPostGraphQLSchema = async (\n  pgConfig: PgConfig,\n  schemas: Array<string> | string,\n  options: PostGraphQLOptions = {},\n  onNewSchema: SchemaListener\n) => {\n  if (typeof onNewSchema !== \"function\") {\n    throw new Error(\n      \"You cannot call watchPostGraphQLSchema without a function to pass new schemas to\"\n    );\n  }\n  if (options.readCache) {\n    throw new Error(\"Using readCache in watch mode does not make sense.\");\n  }\n  let writeCache;\n  const builder = await getPostGraphQLBuilder(\n    pgConfig,\n    schemas,\n    Object.assign({}, options, {\n      setWriteCacheCallback(fn) {\n        writeCache = fn;\n      },\n    })\n  );\n  let released = false;\n  function handleNewSchema(...args) {\n    if (writeCache) writeCache().catch(abort);\n    onNewSchema(...args);\n  }\n  await builder.watchSchema(handleNewSchema);\n\n  return async function release() {\n    if (released) return;\n    released = true;\n    await builder.unwatchSchema();\n  };\n};\n\nexport const postGraphileBaseOverrides = postGraphQLBaseOverrides;\nexport const postGraphileClassicIdsOverrides = postGraphQLClassicIdsOverrides;\nexport const postGraphileInflection = postGraphQLInflection;\nexport const postGraphileClassicIdsInflection = postGraphQLClassicIdsInflection;\nexport const createPostGraphileSchema = createPostGraphQLSchema;\nexport const watchPostGraphileSchema = watchPostGraphQLSchema;\n"]}