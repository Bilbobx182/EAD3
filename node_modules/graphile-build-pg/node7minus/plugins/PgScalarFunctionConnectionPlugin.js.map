{"version":3,"sources":["../../src/plugins/PgScalarFunctionConnectionPlugin.js"],"names":["base64","Buffer","String","str","toString","PgTablesPlugin","builder","inflection","pgInflection","hook","_","newWithHooks","introspectionResultsByKind","pgIntrospectionResultsByKind","getTypeByName","pgGetGqlTypeByTypeId","graphql","GraphQLObjectType","GraphQLNonNull","GraphQLList","GraphQLString","Cursor","procedure","filter","proc","returnsSet","namespace","forEach","returnType","typeById","returnTypeId","returnTypeTable","classById","classId","NodeType","id","EdgeType","name","scalarFunctionEdge","description","fields","fieldWithHooks","cursor","addDataGenerator","usesCursor","type","resolve","data","__cursor","isCursorField","node","value","isEdgeType","nodeType","pgIntrospection","scalarFunctionConnection","recurseDataGeneratorsForField","nodes","map","entry","edges","isConnectionType","edgeType"],"mappings":"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","file":"PgScalarFunctionConnectionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nconst base64 = str => new Buffer(String(str)).toString(\"base64\");\n\nexport default (function PgTablesPlugin(builder, { pgInflection: inflection }) {\n  builder.hook(\n    \"init\",\n    (\n      _,\n      {\n        newWithHooks,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        graphql: {\n          GraphQLObjectType,\n          GraphQLNonNull,\n          GraphQLList,\n          GraphQLString,\n        },\n      }\n    ) => {\n      const Cursor = getTypeByName(\"Cursor\");\n      introspectionResultsByKind.procedure\n        .filter(proc => proc.returnsSet)\n        .filter(proc => !!proc.namespace)\n        .forEach(proc => {\n          const returnType =\n            introspectionResultsByKind.typeById[proc.returnTypeId];\n          const returnTypeTable =\n            introspectionResultsByKind.classById[returnType.classId];\n          if (returnTypeTable) {\n            // Just use the standard table connection from PgTablesPlugin\n            return;\n          }\n          const NodeType = pgGetGqlTypeByTypeId(returnType.id) || GraphQLString;\n          const EdgeType = newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.scalarFunctionEdge(\n                proc.name,\n                proc.namespace.name\n              ),\n              description: `A \\`${NodeType.name}\\` edge in the connection.`,\n              fields: ({ fieldWithHooks }) => {\n                return {\n                  cursor: fieldWithHooks(\n                    \"cursor\",\n                    ({ addDataGenerator }) => {\n                      addDataGenerator(() => ({\n                        usesCursor: [true],\n                      }));\n                      return {\n                        description: \"A cursor for use in pagination.\",\n                        type: Cursor,\n                        resolve(data) {\n                          return base64(JSON.stringify(data.__cursor));\n                        },\n                      };\n                    },\n                    {\n                      isCursorField: true,\n                    }\n                  ),\n                  node: {\n                    description: `The \\`${\n                      NodeType.name\n                    }\\` at the end of the edge.`,\n                    type: NodeType,\n                    resolve(data) {\n                      return data.value;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isEdgeType: true,\n              nodeType: NodeType,\n              pgIntrospection: proc,\n            }\n          );\n          /*const ConnectionType = */\n          newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.scalarFunctionConnection(\n                proc.name,\n                proc.namespace.name\n              ),\n              description: `A connection to a list of \\`${\n                NodeType.name\n              }\\` values.`,\n              fields: ({ recurseDataGeneratorsForField }) => {\n                recurseDataGeneratorsForField(\"edges\");\n                recurseDataGeneratorsForField(\"nodes\");\n                return {\n                  nodes: {\n                    description: `A list of \\`${NodeType.name}\\` objects.`,\n                    type: new GraphQLNonNull(new GraphQLList(NodeType)),\n                    resolve(data) {\n                      return data.data.map(entry => entry.value);\n                    },\n                  },\n                  edges: {\n                    description: `A list of edges which contains the \\`${\n                      NodeType.name\n                    }\\` and cursor to aid in pagination.`,\n                    type: new GraphQLNonNull(\n                      new GraphQLList(new GraphQLNonNull(EdgeType))\n                    ),\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isConnectionType: true,\n              edgeType: EdgeType,\n              nodeType: NodeType,\n              pgIntrospection: proc,\n            }\n          );\n        });\n      return _;\n    }\n  );\n}: Plugin);\n"]}