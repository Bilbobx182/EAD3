{"version":3,"sources":["../../src/plugins/PgConnectionArgOrderByDefaultValue.js"],"names":["PgConnectionArgOrderByDefaultValue","builder","inflection","pgInflection","hook","args","extend","getTypeByName","pgGetGqlTypeByTypeId","scope","isPgFieldConnection","table","pgFieldIntrospection","Self","field","kind","namespace","isSelectable","TableType","type","id","tableTypeName","name","TableOrderByType","orderByType","defaultValueEnum","getValues","find","v","orderBy","defaultValue","value"],"mappings":";;;;;;;;;;;;kBAGgB,SAASA,kCAAT,CACdC,OADc,QAGd;AAAA,MADgBC,UAChB,QADEC,YACF;;AACAF,UAAQG,IAAR,CACE,qCADF,EAEE,UACEC,IADF,gBAQK;AAAA,QANDC,MAMC,SANDA,MAMC;AAAA,QANOC,aAMP,SANOA,aAMP;AAAA,QANsBC,oBAMtB,SANsBA,oBAMtB;AAAA,4BAJDC,KAIC;AAAA,QAJQC,mBAIR,eAJQA,mBAIR;AAAA,QAJmDC,KAInD,eAJ6BC,oBAI7B;AAAA,QAHDC,IAGC,SAHDA,IAGC;AAAA,QAFDC,KAEC,SAFDA,KAEC;;AACH,QACE,CAACJ,mBAAD,IACA,CAACC,KADD,IAEAA,MAAMI,IAAN,KAAe,OAFf,IAGA,CAACJ,MAAMK,SAHP,IAIA,CAACL,MAAMM,YALT,EAME;AACA,aAAOZ,IAAP;AACD;AACD,QAAMa,YAAYV,qBAAqBG,MAAMQ,IAAN,CAAWC,EAAhC,CAAlB;AACA,QAAMC,gBAAgBH,UAAUI,IAAhC;AACA,QAAMC,mBAAmBhB,cACvBL,WAAWsB,WAAX,CAAuBH,aAAvB,CADuB,CAAzB;;AAIA,QAAMI,mBACJF,iBAAiBG,SAAjB,GAA6BC,IAA7B,CAAkC;AAAA,aAAKC,EAAEN,IAAF,KAAW,iBAAhB;AAAA,KAAlC,KACAC,iBAAiBG,SAAjB,GAA6B,CAA7B,CAFF;;AAIA,WAAO,sBAAc,EAAd,EAAkBrB,IAAlB,EAAwB;AAC7BwB,eAASvB,OACPD,KAAKwB,OADE,EAEP;AACEC,sBAAcL,oBAAoB,CAACA,iBAAiBM,KAAlB;AADpC,OAFO,EAKN,6CAA4CjB,MAAMQ,IAAK,SACtDT,KAAKS,IACN,GAPM;AADoB,KAAxB,CAAP;AAWD,GAzCH;AA2CD,C","file":"PgConnectionArgOrderByDefaultValue.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionArgOrderByDefaultValue(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (\n      args,\n      { extend, getTypeByName, pgGetGqlTypeByTypeId },\n      {\n        scope: { isPgFieldConnection, pgFieldIntrospection: table },\n        Self,\n        field,\n      }\n    ) => {\n      if (\n        !isPgFieldConnection ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        !table.isSelectable\n      ) {\n        return args;\n      }\n      const TableType = pgGetGqlTypeByTypeId(table.type.id);\n      const tableTypeName = TableType.name;\n      const TableOrderByType = getTypeByName(\n        inflection.orderByType(tableTypeName)\n      );\n\n      const defaultValueEnum =\n        TableOrderByType.getValues().find(v => v.name === \"PRIMARY_KEY_ASC\") ||\n        TableOrderByType.getValues()[0];\n\n      return Object.assign({}, args, {\n        orderBy: extend(\n          args.orderBy,\n          {\n            defaultValue: defaultValueEnum && [defaultValueEnum.value],\n          },\n          `Adding defaultValue to orderBy for field '${field.name}' of '${\n            Self.name\n          }'`\n        ),\n      });\n    }\n  );\n}: Plugin);\n"]}