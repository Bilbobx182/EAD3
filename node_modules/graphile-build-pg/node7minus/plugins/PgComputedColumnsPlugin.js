"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _makeProcField = require("./makeProcField");

var _makeProcField2 = _interopRequireDefault(_makeProcField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function PgComputedColumnsPlugin(builder) {
  builder.hook("GraphQLObjectType:fields", function (fields, build, _ref) {
    var _ref$scope = _ref.scope,
        isPgRowType = _ref$scope.isPgRowType,
        isPgCompoundType = _ref$scope.isPgCompoundType,
        isInputType = _ref$scope.isInputType,
        table = _ref$scope.pgIntrospection,
        fieldWithHooks = _ref.fieldWithHooks,
        Self = _ref.Self;

    if (isInputType || !(isPgRowType || isPgCompoundType) || !table || table.kind !== "class" || !table.namespace) {
      return fields;
    }
    var extend = build.extend,
        introspectionResultsByKind = build.pgIntrospectionResultsByKind,
        inflection = build.pgInflection;

    var tableType = introspectionResultsByKind.type.filter(function (type) {
      return type.type === "c" && type.namespaceId === table.namespaceId && type.classId === table.id;
    })[0];
    if (!tableType) {
      throw new Error("Could not determine the type for this table");
    }
    return extend(fields, introspectionResultsByKind.procedure.filter(function (proc) {
      return proc.isStable;
    }).filter(function (proc) {
      return proc.namespaceId === table.namespaceId;
    }).filter(function (proc) {
      return proc.name.startsWith(`${table.name}_`);
    }).filter(function (proc) {
      return proc.argTypeIds.length > 0;
    }).filter(function (proc) {
      return proc.argTypeIds[0] === tableType.id;
    }).reduce(function (memo, proc) {
      /*
      proc =
        { kind: 'procedure',
          name: 'integration_webhook_secret',
          description: null,
          namespaceId: '6484381',
          isStrict: false,
          returnsSet: false,
          isStable: true,
          returnTypeId: '2950',
          argTypeIds: [ '6484569' ],
          argNames: [ 'integration' ],
          argDefaultsNum: 0 }
      */
      var argTypes = proc.argTypeIds.map(function (typeId) {
        return introspectionResultsByKind.typeById[typeId];
      });
      if (argTypes.slice(1).some(function (type) {
        return type.type === "c" && type.class && type.class.isSelectable;
      })) {
        // Accepts two input tables? Skip.
        return memo;
      }

      var pseudoColumnName = proc.name.substr(table.name.length + 1);
      var fieldName = inflection.column(pseudoColumnName, table.name, table.namespace.name);
      memo[fieldName] = (0, _makeProcField2.default)(fieldName, proc, build, {
        fieldWithHooks,
        computed: true
      });
      return memo;
    }, {}), `Adding computed column to '${Self.name}'`);
  });
};
//# sourceMappingURL=PgComputedColumnsPlugin.js.map