"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _isString = require("lodash/isString");

var _isString2 = _interopRequireDefault(_isString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function PgConnectionArgOrderBy(builder, _ref) {
  var inflection = _ref.pgInflection;

  builder.hook("init", function (_, _ref2) {
    var newWithHooks = _ref2.newWithHooks,
        introspectionResultsByKind = _ref2.pgIntrospectionResultsByKind,
        GraphQLEnumType = _ref2.graphql.GraphQLEnumType;

    introspectionResultsByKind.class.filter(function (table) {
      return table.isSelectable;
    }).filter(function (table) {
      return !!table.namespace;
    }).forEach(function (table) {
      var tableTypeName = inflection.tableType(table.name, table.namespace.name);
      /* const TableOrderByType = */
      newWithHooks(GraphQLEnumType, {
        name: inflection.orderByType(tableTypeName),
        description: `Methods to use when ordering \`${tableTypeName}\`.`,
        values: {
          NATURAL: {
            value: {
              alias: null,
              specs: []
            }
          }
        }
      }, {
        pgIntrospection: table,
        isPgRowSortEnum: true
      });
    });
    return _;
  });
  builder.hook("GraphQLObjectType:fields:field:args", function (args, _ref3, _ref4) {
    var extend = _ref3.extend,
        getTypeByName = _ref3.getTypeByName,
        pgGetGqlTypeByTypeId = _ref3.pgGetGqlTypeByTypeId,
        sql = _ref3.pgSql,
        _ref3$graphql = _ref3.graphql,
        GraphQLList = _ref3$graphql.GraphQLList,
        GraphQLNonNull = _ref3$graphql.GraphQLNonNull;
    var _ref4$scope = _ref4.scope,
        isPgFieldConnection = _ref4$scope.isPgFieldConnection,
        table = _ref4$scope.pgFieldIntrospection,
        addArgDataGenerator = _ref4.addArgDataGenerator,
        Self = _ref4.Self,
        field = _ref4.field;

    if (!isPgFieldConnection || !table || table.kind !== "class" || !table.namespace || !table.isSelectable) {
      return args;
    }
    var TableType = pgGetGqlTypeByTypeId(table.type.id);
    var tableTypeName = TableType.name;
    var TableOrderByType = getTypeByName(inflection.orderByType(tableTypeName));

    addArgDataGenerator(function connectionOrderBy(_ref5) {
      var rawOrderBy = _ref5.orderBy;

      var orderBy = rawOrderBy ? Array.isArray(rawOrderBy) ? rawOrderBy : [rawOrderBy] : null;
      return {
        pgCursorPrefix: orderBy && orderBy.some(function (item) {
          return item.alias;
        }) ? orderBy.filter(function (item) {
          return item.alias;
        }).map(function (item) {
          return sql.literal(item.alias);
        }) : null,
        pgQuery: function pgQuery(queryBuilder) {
          if (orderBy != null) {
            orderBy.forEach(function (item) {
              var specs = item.specs,
                  unique = item.unique;

              var orders = Array.isArray(specs[0]) || specs.length === 0 ? specs : [specs];
              orders.forEach(function (_ref6) {
                var _ref7 = (0, _slicedToArray3.default)(_ref6, 2),
                    col = _ref7[0],
                    ascending = _ref7[1];

                var expr = (0, _isString2.default)(col) ? sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(col)}` : col;
                queryBuilder.orderBy(expr, ascending);
              });
              if (unique) {
                queryBuilder.setOrderIsUnique();
              }
            });
          }
        }
      };
    });

    return extend(args, {
      orderBy: {
        description: `The method to use when ordering \`${tableTypeName}\`.`,
        type: new GraphQLList(new GraphQLNonNull(TableOrderByType))
      }
    }, `Adding 'orderBy' to field '${field.name}' of '${Self.name}'`);
  });
};
//# sourceMappingURL=PgConnectionArgOrderBy.js.map