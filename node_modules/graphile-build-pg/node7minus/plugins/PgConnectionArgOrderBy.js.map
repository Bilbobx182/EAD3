{"version":3,"sources":["../../src/plugins/PgConnectionArgOrderBy.js"],"names":["PgConnectionArgOrderBy","builder","inflection","pgInflection","hook","_","newWithHooks","introspectionResultsByKind","pgIntrospectionResultsByKind","GraphQLEnumType","graphql","class","filter","table","isSelectable","namespace","forEach","tableTypeName","tableType","name","orderByType","description","values","NATURAL","value","alias","specs","pgIntrospection","isPgRowSortEnum","args","extend","getTypeByName","pgGetGqlTypeByTypeId","sql","pgSql","GraphQLList","GraphQLNonNull","scope","isPgFieldConnection","pgFieldIntrospection","addArgDataGenerator","Self","field","kind","TableType","type","id","TableOrderByType","connectionOrderBy","rawOrderBy","orderBy","Array","isArray","pgCursorPrefix","some","item","map","literal","pgQuery","unique","orders","length","col","ascending","expr","fragment","queryBuilder","getTableAlias","identifier","setOrderIsUnique"],"mappings":"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","file":"PgConnectionArgOrderBy.js","sourcesContent":["// @flow\nimport isString from \"lodash/isString\";\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionArgOrderBy(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\n    \"init\",\n    (\n      _,\n      {\n        newWithHooks,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        graphql: { GraphQLEnumType },\n      }\n    ) => {\n      introspectionResultsByKind.class\n        .filter(table => table.isSelectable)\n        .filter(table => !!table.namespace)\n        .forEach(table => {\n          const tableTypeName = inflection.tableType(\n            table.name,\n            table.namespace.name\n          );\n          /* const TableOrderByType = */\n          newWithHooks(\n            GraphQLEnumType,\n            {\n              name: inflection.orderByType(tableTypeName),\n              description: `Methods to use when ordering \\`${tableTypeName}\\`.`,\n              values: {\n                NATURAL: {\n                  value: {\n                    alias: null,\n                    specs: [],\n                  },\n                },\n              },\n            },\n            {\n              pgIntrospection: table,\n              isPgRowSortEnum: true,\n            }\n          );\n        });\n      return _;\n    }\n  );\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (\n      args,\n      {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgSql: sql,\n        graphql: { GraphQLList, GraphQLNonNull },\n      },\n      {\n        scope: { isPgFieldConnection, pgFieldIntrospection: table },\n        addArgDataGenerator,\n        Self,\n        field,\n      }\n    ) => {\n      if (\n        !isPgFieldConnection ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        !table.isSelectable\n      ) {\n        return args;\n      }\n      const TableType = pgGetGqlTypeByTypeId(table.type.id);\n      const tableTypeName = TableType.name;\n      const TableOrderByType = getTypeByName(\n        inflection.orderByType(tableTypeName)\n      );\n\n      addArgDataGenerator(function connectionOrderBy({ orderBy: rawOrderBy }) {\n        const orderBy = rawOrderBy\n          ? Array.isArray(rawOrderBy) ? rawOrderBy : [rawOrderBy]\n          : null;\n        return {\n          pgCursorPrefix:\n            orderBy && orderBy.some(item => item.alias)\n              ? orderBy\n                  .filter(item => item.alias)\n                  .map(item => sql.literal(item.alias))\n              : null,\n          pgQuery: queryBuilder => {\n            if (orderBy != null) {\n              orderBy.forEach(item => {\n                const { specs, unique } = item;\n                const orders =\n                  Array.isArray(specs[0]) || specs.length === 0\n                    ? specs\n                    : [specs];\n                orders.forEach(([col, ascending]) => {\n                  const expr = isString(col)\n                    ? sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                        col\n                      )}`\n                    : col;\n                  queryBuilder.orderBy(expr, ascending);\n                });\n                if (unique) {\n                  queryBuilder.setOrderIsUnique();\n                }\n              });\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          orderBy: {\n            description: `The method to use when ordering \\`${tableTypeName}\\`.`,\n            type: new GraphQLList(new GraphQLNonNull(TableOrderByType)),\n          },\n        },\n        `Adding 'orderBy' to field '${field.name}' of '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}