"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _makeProcField = require("./makeProcField");

var _makeProcField2 = _interopRequireDefault(_makeProcField);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debugWarn = (0, _debug2.default)("graphile-build-pg:warn");

exports.default = function PgQueryProceduresPlugin(builder) {
  builder.hook("GraphQLObjectType:fields", function (fields, build, _ref) {
    var isRootQuery = _ref.scope.isRootQuery,
        fieldWithHooks = _ref.fieldWithHooks;

    if (!isRootQuery) {
      return fields;
    }
    var extend = build.extend,
        inflection = build.pgInflection,
        introspectionResultsByKind = build.pgIntrospectionResultsByKind;

    return extend(fields, introspectionResultsByKind.procedure.filter(function (proc) {
      return proc.isStable;
    }).filter(function (proc) {
      return !!proc.namespace;
    }).reduce(function (memo, proc) {
      /*
      proc =
        { kind: 'procedure',
          name: 'integration_webhook_secret',
          description: null,
          namespaceId: '6484381',
          isStrict: false,
          returnsSet: false,
          isStable: true,
          returnTypeId: '2950',
          argTypeIds: [ '6484569' ],
          argNames: [ 'integration' ],
          argDefaultsNum: 0 }
      */
      var argTypes = proc.argTypeIds.map(function (typeId) {
        return introspectionResultsByKind.typeById[typeId];
      });
      if (argTypes.some(function (type) {
        return type.type === "c" && type.class && type.class.isSelectable;
      })) {
        // Selects a table, ignore!
        return memo;
      }
      var firstArgType = argTypes[0];
      if (firstArgType && firstArgType.type === "c" && firstArgType.class && firstArgType.namespaceId === proc.namespaceId && proc.name.startsWith(`${firstArgType.name}_`)) {
        // It's a computed field, skip
        return memo;
      }

      var fieldName = inflection.functionName(proc.name, proc.namespace.name);
      try {
        memo[fieldName] = (0, _makeProcField2.default)(fieldName, proc, build, {
          fieldWithHooks
        });
      } catch (e) {
        // eslint-disable-next-line no-console
        console.warn(_chalk2.default.bold.yellow(`Failed to add function '${proc.namespace.name}.${proc.name}'; run with 'DEBUG="graphile-build-pg:warn"' to view the error`));
        debugWarn(e);
      }
      return memo;
    }, {}), `Adding query procedures to root Query type`);
  });
};
//# sourceMappingURL=PgQueryProceduresPlugin.js.map