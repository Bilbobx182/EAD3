{"version":3,"sources":["../../src/plugins/PgMutationPayloadEdgePlugin.js"],"names":["PgMutationPayloadEdgePlugin","builder","inflection","pgInflection","hook","fields","extend","getTypeByName","pgGetGqlTypeByTypeId","sql","pgSql","graphql","GraphQLList","GraphQLNonNull","introspectionResultsByKind","pgIntrospectionResultsByKind","scope","isMutationPayload","pgIntrospection","pgIntrospectionTable","fieldWithHooks","recurseDataGeneratorsForField","Self","table","kind","namespace","isSelectable","TableType","type","id","tableTypeName","name","TableOrderByType","orderByType","TableEdgeType","edge","attributes","attribute","filter","attr","classId","primaryKeyConstraint","constraint","con","primaryKeys","keyAttributeNums","map","num","fieldName","edgeField","addArgDataGenerator","connectionOrderBy","rawOrderBy","orderBy","Array","isArray","pgQuery","aliases","expressions","unique","forEach","alias","item","specs","itemIsUnique","orders","col","_ascending","expr","fragment","queryBuilder","getTableAlias","identifier","push","key","length","select","join","literal","a","defaultValueEnum","getValues","find","v","description","args","defaultValue","value","resolve","data","order","some","__identifiers","__cursor","isPgMutationPayloadEdgeField","pgFieldIntrospection"],"mappings":"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","file":"PgMutationPayloadEdgePlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport isString from \"lodash/isString\";\n\nexport default (function PgMutationPayloadEdgePlugin(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgSql: sql,\n        graphql: { GraphQLList, GraphQLNonNull },\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n      },\n      {\n        scope: { isMutationPayload, pgIntrospection, pgIntrospectionTable },\n        fieldWithHooks,\n        recurseDataGeneratorsForField,\n        Self,\n      }\n    ) => {\n      const table = pgIntrospectionTable || pgIntrospection;\n      if (\n        !isMutationPayload ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        !table.isSelectable\n      ) {\n        return fields;\n      }\n      const TableType = pgGetGqlTypeByTypeId(table.type.id);\n      const tableTypeName = TableType.name;\n      const TableOrderByType = getTypeByName(\n        inflection.orderByType(tableTypeName)\n      );\n      const TableEdgeType = getTypeByName(inflection.edge(tableTypeName));\n      if (!TableEdgeType) {\n        return fields;\n      }\n\n      const attributes = introspectionResultsByKind.attribute.filter(\n        attr => attr.classId === table.id\n      );\n      const primaryKeyConstraint = introspectionResultsByKind.constraint\n        .filter(con => con.classId === table.id)\n        .filter(con => con.type === \"p\")[0];\n      const primaryKeys =\n        primaryKeyConstraint &&\n        primaryKeyConstraint.keyAttributeNums.map(\n          num => attributes.filter(attr => attr.num === num)[0]\n        );\n\n      const fieldName = inflection.edgeField(table.name, table.namespace.name);\n      recurseDataGeneratorsForField(fieldName);\n      return extend(\n        fields,\n        {\n          [fieldName]: fieldWithHooks(\n            fieldName,\n            ({ addArgDataGenerator }) => {\n              addArgDataGenerator(function connectionOrderBy({\n                orderBy: rawOrderBy,\n              }) {\n                const orderBy = rawOrderBy\n                  ? Array.isArray(rawOrderBy) ? rawOrderBy : [rawOrderBy]\n                  : null;\n                return {\n                  pgQuery: queryBuilder => {\n                    if (orderBy != null) {\n                      const aliases = [];\n                      const expressions = [];\n                      let unique = false;\n                      orderBy.forEach(item => {\n                        const { alias, specs, unique: itemIsUnique } = item;\n                        unique = unique || itemIsUnique;\n                        const orders = Array.isArray(specs[0])\n                          ? specs\n                          : [specs];\n                        orders.forEach(([col, _ascending]) => {\n                          if (!col) {\n                            return;\n                          }\n                          const expr = isString(col)\n                            ? sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                col\n                              )}`\n                            : col;\n                          expressions.push(expr);\n                        });\n                        if (alias == null) return;\n                        aliases.push(alias);\n                      });\n                      if (!unique && primaryKeys) {\n                        // Add PKs\n                        primaryKeys.forEach(key => {\n                          expressions.push(\n                            sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                              key.name\n                            )}`\n                          );\n                        });\n                      }\n                      if (aliases.length) {\n                        queryBuilder.select(\n                          sql.fragment`json_build_array(${sql.join(\n                            aliases.map(\n                              a => sql.fragment`${sql.literal(a)}::text`\n                            ),\n                            \", \"\n                          )}, json_build_array(${sql.join(\n                            expressions,\n                            \", \"\n                          )}))`,\n                          \"__order_\" + aliases.join(\"__\")\n                        );\n                      }\n                    }\n                  },\n                };\n              });\n\n              const defaultValueEnum =\n                TableOrderByType.getValues().find(\n                  v => v.name === \"PRIMARY_KEY_ASC\"\n                ) || TableOrderByType.getValues()[0];\n              return {\n                description: \"An edge for the type. May be used by Relay 1.\",\n                type: TableEdgeType,\n                args: {\n                  orderBy: {\n                    description: `The method to use when ordering \\`${tableTypeName}\\`.`,\n                    type: new GraphQLList(new GraphQLNonNull(TableOrderByType)),\n                    defaultValue: defaultValueEnum && defaultValueEnum.value,\n                  },\n                },\n                resolve(data, { orderBy: rawOrderBy }) {\n                  const orderBy = rawOrderBy\n                    ? Array.isArray(rawOrderBy) ? rawOrderBy : [rawOrderBy]\n                    : null;\n                  const order =\n                    orderBy && orderBy.some(item => item.alias)\n                      ? orderBy.filter(item => item.alias)\n                      : null;\n\n                  if (!order) {\n                    if (data.data.__identifiers) {\n                      return Object.assign({}, data.data, {\n                        __cursor: [\"primary_key_asc\", data.data.__identifiers],\n                      });\n                    } else {\n                      return data.data;\n                    }\n                  }\n                  return Object.assign({}, data.data, {\n                    __cursor:\n                      data.data[\n                        `__order_${order.map(item => item.alias).join(\"__\")}`\n                      ],\n                  });\n                },\n              };\n            },\n            {\n              isPgMutationPayloadEdgeField: true,\n              pgFieldIntrospection: table,\n            }\n          ),\n        },\n        `Adding edge field to mutation payload '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}