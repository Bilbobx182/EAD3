{"version":3,"sources":["../../src/plugins/PgQueryProceduresPlugin.js"],"names":["debugWarn","PgQueryProceduresPlugin","builder","hook","fields","build","isRootQuery","scope","fieldWithHooks","extend","inflection","pgInflection","introspectionResultsByKind","pgIntrospectionResultsByKind","procedure","filter","proc","isStable","namespace","reduce","memo","argTypes","argTypeIds","map","typeById","typeId","some","type","class","isSelectable","firstArgType","namespaceId","name","startsWith","fieldName","functionName","e","console","warn","bold","yellow"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAY,qBAAa,wBAAb,CAAlB;;kBAEgB,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AACxDA,UAAQC,IAAR,CACE,0BADF,EAEE,UAACC,MAAD,EAASC,KAAT,QAA+D;AAAA,QAApCC,WAAoC,QAA7CC,KAA6C,CAApCD,WAAoC;AAAA,QAArBE,cAAqB,QAArBA,cAAqB;;AAC7D,QAAI,CAACF,WAAL,EAAkB;AAChB,aAAOF,MAAP;AACD;AAH4D,QAK3DK,MAL2D,GAQzDJ,KARyD,CAK3DI,MAL2D;AAAA,QAM7CC,UAN6C,GAQzDL,KARyD,CAM3DM,YAN2D;AAAA,QAO7BC,0BAP6B,GAQzDP,KARyD,CAO3DQ,4BAP2D;;AAS7D,WAAOJ,OACLL,MADK,EAELQ,2BAA2BE,SAA3B,CACGC,MADH,CACU;AAAA,aAAQC,KAAKC,QAAb;AAAA,KADV,EAEGF,MAFH,CAEU;AAAA,aAAQ,CAAC,CAACC,KAAKE,SAAf;AAAA,KAFV,EAGGC,MAHH,CAGU,UAACC,IAAD,EAAOJ,IAAP,EAAgB;AACtB;;;;;;;;;;;;;;AAcA,UAAMK,WAAWL,KAAKM,UAAL,CAAgBC,GAAhB,CACf;AAAA,eAAUX,2BAA2BY,QAA3B,CAAoCC,MAApC,CAAV;AAAA,OADe,CAAjB;AAGA,UACEJ,SAASK,IAAT,CACE;AAAA,eACEC,KAAKA,IAAL,KAAc,GAAd,IAAqBA,KAAKC,KAA1B,IAAmCD,KAAKC,KAAL,CAAWC,YADhD;AAAA,OADF,CADF,EAKE;AACA;AACA,eAAOT,IAAP;AACD;AACD,UAAMU,eAAeT,SAAS,CAAT,CAArB;AACA,UACES,gBACAA,aAAaH,IAAb,KAAsB,GADtB,IAEAG,aAAaF,KAFb,IAGAE,aAAaC,WAAb,KAA6Bf,KAAKe,WAHlC,IAIAf,KAAKgB,IAAL,CAAUC,UAAV,CAAsB,GAAEH,aAAaE,IAAK,GAA1C,CALF,EAME;AACA;AACA,eAAOZ,IAAP;AACD;;AAED,UAAMc,YAAYxB,WAAWyB,YAAX,CAChBnB,KAAKgB,IADW,EAEhBhB,KAAKE,SAAL,CAAec,IAFC,CAAlB;AAIA,UAAI;AACFZ,aAAKc,SAAL,IAAkB,6BAAcA,SAAd,EAAyBlB,IAAzB,EAA+BX,KAA/B,EAAsC;AACtDG;AADsD,SAAtC,CAAlB;AAGD,OAJD,CAIE,OAAO4B,CAAP,EAAU;AACV;AACAC,gBAAQC,IAAR,CACE,gBAAMC,IAAN,CAAWC,MAAX,CACG,2BAA0BxB,KAAKE,SAAL,CAAec,IAAK,IAC7ChB,KAAKgB,IACN,gEAHH,CADF;AAOAhC,kBAAUoC,CAAV;AACD;AACD,aAAOhB,IAAP;AACD,KA9DH,EA8DK,EA9DL,CAFK,EAiEJ,4CAjEI,CAAP;AAmED,GA9EH;AAgFD,C","file":"PgQueryProceduresPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport makeProcField from \"./makeProcField\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\n\nconst debugWarn = debugFactory(\"graphile-build-pg:warn\");\n\nexport default (function PgQueryProceduresPlugin(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, { scope: { isRootQuery }, fieldWithHooks }) => {\n      if (!isRootQuery) {\n        return fields;\n      }\n      const {\n        extend,\n        pgInflection: inflection,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n      } = build;\n      return extend(\n        fields,\n        introspectionResultsByKind.procedure\n          .filter(proc => proc.isStable)\n          .filter(proc => !!proc.namespace)\n          .reduce((memo, proc) => {\n            /*\n            proc =\n              { kind: 'procedure',\n                name: 'integration_webhook_secret',\n                description: null,\n                namespaceId: '6484381',\n                isStrict: false,\n                returnsSet: false,\n                isStable: true,\n                returnTypeId: '2950',\n                argTypeIds: [ '6484569' ],\n                argNames: [ 'integration' ],\n                argDefaultsNum: 0 }\n            */\n            const argTypes = proc.argTypeIds.map(\n              typeId => introspectionResultsByKind.typeById[typeId]\n            );\n            if (\n              argTypes.some(\n                type =>\n                  type.type === \"c\" && type.class && type.class.isSelectable\n              )\n            ) {\n              // Selects a table, ignore!\n              return memo;\n            }\n            const firstArgType = argTypes[0];\n            if (\n              firstArgType &&\n              firstArgType.type === \"c\" &&\n              firstArgType.class &&\n              firstArgType.namespaceId === proc.namespaceId &&\n              proc.name.startsWith(`${firstArgType.name}_`)\n            ) {\n              // It's a computed field, skip\n              return memo;\n            }\n\n            const fieldName = inflection.functionName(\n              proc.name,\n              proc.namespace.name\n            );\n            try {\n              memo[fieldName] = makeProcField(fieldName, proc, build, {\n                fieldWithHooks,\n              });\n            } catch (e) {\n              // eslint-disable-next-line no-console\n              console.warn(\n                chalk.bold.yellow(\n                  `Failed to add function '${proc.namespace.name}.${\n                    proc.name\n                  }'; run with 'DEBUG=\"graphile-build-pg:warn\"' to view the error`\n                )\n              );\n              debugWarn(e);\n            }\n            return memo;\n          }, {}),\n        `Adding query procedures to root Query type`\n      );\n    }\n  );\n}: Plugin);\n"]}