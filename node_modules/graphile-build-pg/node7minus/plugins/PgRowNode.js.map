{"version":3,"sources":["../../src/plugins/PgRowNode.js"],"names":["base64Decode","Buffer","String","str","toString","debugSql","builder","inflection","pgInflection","hook","object","addNodeFetcherForTypeName","introspectionResultsByKind","pgIntrospectionResultsByKind","sql","pgSql","gql2pg","scope","isPgRowType","table","pgIntrospection","namespace","sqlFullTableName","identifier","name","attributes","attribute","filter","attr","classId","id","primaryKeyConstraint","constraint","con","type","primaryKeys","keyAttributeNums","map","num","data","identifiers","parsedResolveInfoFragment","ReturnType","resolveData","pgClient","length","Error","query","undefined","forEach","key","idx","where","fragment","getTableAlias","compile","text","values","enabled","rows","row","fields","nodeIdFieldName","extend","parseResolveInfo","pgGetGqlTypeByTypeId","getNodeType","graphql","GraphQLNonNull","GraphQLID","isRootQuery","fieldWithHooks","class","reduce","memo","TableType","fieldName","tableNode","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","resolveInfo","nodeId","JSON","parse","alias","NodeTypeByAlias","isPgNodeQuery","pgFieldIntrospection","PgRowByUniqueConstraint"],"mappings":"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","file":"PgRowNode.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\n\nconst base64Decode = str => new Buffer(String(str), \"base64\").toString(\"utf8\");\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgRowByUniqueConstraint(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\n    \"GraphQLObjectType\",\n    (\n      object,\n      {\n        addNodeFetcherForTypeName,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        gql2pg,\n      },\n      { scope: { isPgRowType, pgIntrospection: table } }\n    ) => {\n      if (!isPgRowType || !table.namespace) {\n        return object;\n      }\n      const sqlFullTableName = sql.identifier(table.namespace.name, table.name);\n      const attributes = introspectionResultsByKind.attribute.filter(\n        attr => attr.classId === table.id\n      );\n      const primaryKeyConstraint = introspectionResultsByKind.constraint\n        .filter(con => con.classId === table.id)\n        .filter(con => con.type === \"p\")[0];\n      if (!primaryKeyConstraint) {\n        return object;\n      }\n      const primaryKeys =\n        primaryKeyConstraint &&\n        primaryKeyConstraint.keyAttributeNums.map(\n          num => attributes.filter(attr => attr.num === num)[0]\n        );\n      addNodeFetcherForTypeName(\n        object.name,\n        async (\n          data,\n          identifiers,\n          { pgClient },\n          parsedResolveInfoFragment,\n          ReturnType,\n          resolveData\n        ) => {\n          if (identifiers.length !== primaryKeys.length) {\n            throw new Error(\"Invalid ID\");\n          }\n          const query = queryFromResolveData(\n            sqlFullTableName,\n            undefined,\n            resolveData,\n            {},\n            builder => {\n              primaryKeys.forEach((key, idx) => {\n                builder.where(\n                  sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                    key.name\n                  )} = ${gql2pg(identifiers[idx], primaryKeys[idx].type)}`\n                );\n              });\n            }\n          );\n          const { text, values } = sql.compile(query);\n          if (debugSql.enabled) debugSql(text);\n          const { rows: [row] } = await pgClient.query(text, values);\n          return row;\n        }\n      );\n      return object;\n    }\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        nodeIdFieldName,\n        extend,\n        parseResolveInfo,\n        pgGetGqlTypeByTypeId,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        gql2pg,\n        getNodeType,\n        graphql: { GraphQLNonNull, GraphQLID },\n      },\n      { scope: { isRootQuery }, fieldWithHooks }\n    ) => {\n      if (!isRootQuery || !nodeIdFieldName) {\n        return fields;\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.class\n          .filter(table => !!table.namespace)\n          .reduce((memo, table) => {\n            const TableType = pgGetGqlTypeByTypeId(table.type.id);\n            const sqlFullTableName = sql.identifier(\n              table.namespace.name,\n              table.name\n            );\n            if (TableType) {\n              const attributes = introspectionResultsByKind.attribute.filter(\n                attr => attr.classId === table.id\n              );\n              const primaryKeyConstraint = introspectionResultsByKind.constraint\n                .filter(con => con.classId === table.id)\n                .filter(con => con.type === \"p\")[0];\n              if (!primaryKeyConstraint) {\n                return memo;\n              }\n              const primaryKeys =\n                primaryKeyConstraint &&\n                primaryKeyConstraint.keyAttributeNums.map(\n                  num => attributes.filter(attr => attr.num === num)[0]\n                );\n              const fieldName = inflection.tableNode(\n                table.name,\n                table.namespace.name\n              );\n              memo[fieldName] = fieldWithHooks(\n                fieldName,\n                ({ getDataFromParsedResolveInfoFragment }) => {\n                  return {\n                    description: `Reads a single \\`${\n                      TableType.name\n                    }\\` using its globally unique \\`ID\\`.`,\n                    type: TableType,\n                    args: {\n                      [nodeIdFieldName]: {\n                        description: `The globally unique \\`ID\\` to be used in selecting a single \\`${\n                          TableType.name\n                        }\\`.`,\n                        type: new GraphQLNonNull(GraphQLID),\n                      },\n                    },\n                    async resolve(parent, args, { pgClient }, resolveInfo) {\n                      const nodeId = args[nodeIdFieldName];\n                      try {\n                        const [alias, ...identifiers] = JSON.parse(\n                          base64Decode(nodeId)\n                        );\n                        const NodeTypeByAlias = getNodeType(alias);\n                        if (NodeTypeByAlias !== TableType) {\n                          throw new Error(\"Mismatched type\");\n                        }\n                        if (identifiers.length !== primaryKeys.length) {\n                          throw new Error(\"Invalid ID\");\n                        }\n\n                        const parsedResolveInfoFragment = parseResolveInfo(\n                          resolveInfo\n                        );\n                        const resolveData = getDataFromParsedResolveInfoFragment(\n                          parsedResolveInfoFragment,\n                          TableType\n                        );\n                        const query = queryFromResolveData(\n                          sqlFullTableName,\n                          undefined,\n                          resolveData,\n                          {},\n                          builder => {\n                            primaryKeys.forEach((key, idx) => {\n                              builder.where(\n                                sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                  key.name\n                                )} = ${gql2pg(\n                                  identifiers[idx],\n                                  primaryKeys[idx].type\n                                )}`\n                              );\n                            });\n                          }\n                        );\n                        const { text, values } = sql.compile(query);\n                        if (debugSql.enabled) debugSql(text);\n                        const { rows: [row] } = await pgClient.query(\n                          text,\n                          values\n                        );\n                        return row;\n                      } catch (e) {\n                        return null;\n                      }\n                    },\n                  };\n                },\n                {\n                  isPgNodeQuery: true,\n                  pgFieldIntrospection: table,\n                }\n              );\n            }\n            return memo;\n          }, {}),\n        `Adding \"row by node ID\" fields to root Query type`\n      );\n    }\n  );\n}: Plugin);\n"]}