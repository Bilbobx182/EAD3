{"version":3,"sources":["../../src/plugins/PgConnectionArgCondition.js"],"names":["PgConnectionArgCondition","builder","inflection","pgInflection","hook","_","build","newWithHooks","introspectionResultsByKind","pgIntrospectionResultsByKind","pgGetGqlInputTypeByTypeId","graphql","GraphQLInputObjectType","GraphQLString","pgColumnFilter","class","filter","table","isSelectable","namespace","forEach","tableTypeName","tableType","name","description","conditionType","fields","fieldWithHooks","context","attribute","attr","classId","id","reduce","memo","fieldName","column","type","typeId","isPgConnectionConditionInputField","pgIntrospection","isPgCondition","args","sql","pgSql","gql2pg","extend","getTypeByName","pgGetGqlTypeByTypeId","scope","isPgFieldConnection","pgFieldIntrospection","addArgDataGenerator","Self","field","kind","TableType","TableConditionType","connectionCondition","condition","pgQuery","val","queryBuilder","where","fragment","getTableAlias","identifier"],"mappings":"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","file":"PgConnectionArgCondition.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionArgCondition(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\"init\", (_, build) => {\n    const {\n      newWithHooks,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgGetGqlInputTypeByTypeId,\n      graphql: { GraphQLInputObjectType, GraphQLString },\n      pgColumnFilter,\n    } = build;\n    introspectionResultsByKind.class\n      .filter(table => table.isSelectable)\n      .filter(table => !!table.namespace)\n      .forEach(table => {\n        const tableTypeName = inflection.tableType(\n          table.name,\n          table.namespace.name\n        );\n        /* const TableConditionType = */\n        newWithHooks(\n          GraphQLInputObjectType,\n          {\n            description: `A condition to be used against \\`${tableTypeName}\\` object types. All fields are tested for equality and combined with a logical ‘and.’`,\n            name: inflection.conditionType(\n              inflection.tableType(table.name, table.namespace.name)\n            ),\n            fields: context => {\n              const { fieldWithHooks } = context;\n              return introspectionResultsByKind.attribute\n                .filter(attr => attr.classId === table.id)\n                .filter(attr => pgColumnFilter(attr, build, context))\n                .reduce((memo, attr) => {\n                  const fieldName = inflection.column(\n                    attr.name,\n                    table.name,\n                    table.namespace.name\n                  );\n                  memo[fieldName] = fieldWithHooks(\n                    fieldName,\n                    {\n                      description: `Checks for equality with the object’s \\`${fieldName}\\` field.`,\n                      type:\n                        pgGetGqlInputTypeByTypeId(attr.typeId) || GraphQLString,\n                    },\n                    {\n                      isPgConnectionConditionInputField: true,\n                    }\n                  );\n                  return memo;\n                }, {});\n            },\n          },\n          {\n            pgIntrospection: table,\n            isPgCondition: true,\n          }\n        );\n      });\n    return _;\n  });\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        pgSql: sql,\n        gql2pg,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgColumnFilter,\n      } = build;\n      const {\n        scope: { isPgFieldConnection, pgFieldIntrospection: table },\n        addArgDataGenerator,\n        Self,\n        field,\n      } = context;\n      if (\n        !isPgFieldConnection ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace\n      ) {\n        return args;\n      }\n      const TableType = pgGetGqlTypeByTypeId(table.type.id);\n      const TableConditionType = getTypeByName(\n        inflection.conditionType(TableType.name)\n      );\n\n      addArgDataGenerator(function connectionCondition({ condition }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (condition != null) {\n              introspectionResultsByKind.attribute\n                .filter(attr => attr.classId === table.id)\n                .filter(attr => pgColumnFilter(attr, build, context))\n                .forEach(attr => {\n                  const fieldName = inflection.column(\n                    attr.name,\n                    table.name,\n                    table.namespace.name\n                  );\n                  const val = condition[fieldName];\n                  if (val != null) {\n                    queryBuilder.where(\n                      sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                        attr.name\n                      )} = ${gql2pg(val, attr.type)}`\n                    );\n                  } else if (val === null) {\n                    queryBuilder.where(\n                      sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                        attr.name\n                      )} IS NULL`\n                    );\n                  }\n                });\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          condition: {\n            description:\n              \"A condition to be used in determining which values should be returned by the collection.\",\n            type: TableConditionType,\n          },\n        },\n        `Adding condition to connection field '${field.name}' of '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}