"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function PgOrderAllColumnsPlugin(builder, _ref) {
  var inflection = _ref.pgInflection;

  builder.hook("GraphQLEnumType:values", function (values, build, context) {
    var extend = build.extend,
        introspectionResultsByKind = build.pgIntrospectionResultsByKind,
        pgColumnFilter = build.pgColumnFilter;
    var _context$scope = context.scope,
        isPgRowSortEnum = _context$scope.isPgRowSortEnum,
        table = _context$scope.pgIntrospection;

    if (!isPgRowSortEnum || !table || table.kind !== "class") {
      return values;
    }
    return extend(values, introspectionResultsByKind.attribute.filter(function (attr) {
      return attr.classId === table.id;
    }).filter(function (attr) {
      return pgColumnFilter(attr, build, context);
    }).reduce(function (memo, attr) {
      var ascFieldName = inflection.orderByEnum(attr.name, true, table.name, table.namespaceName);
      var descFieldName = inflection.orderByEnum(attr.name, false, table.name, table.namespaceName);
      memo[ascFieldName] = {
        value: {
          alias: ascFieldName.toLowerCase(),
          specs: [[attr.name, true]]
        }
      };
      memo[descFieldName] = {
        value: {
          alias: descFieldName.toLowerCase(),
          specs: [[attr.name, false]]
        }
      };
      return memo;
    }, {}), `Adding order values from table '${table.name}'`);
  });
};
//# sourceMappingURL=PgOrderAllColumnsPlugin.js.map