{"version":3,"sources":["../../src/plugins/PgBackwardRelationPlugin.js"],"names":["debug","PgBackwardRelationPlugin","builder","inflection","pgInflection","hook","fields","extend","getTypeByName","pgGetGqlTypeByTypeId","introspectionResultsByKind","pgIntrospectionResultsByKind","sql","pgSql","getAliasFromResolveInfo","GraphQLNonNull","graphql","scope","isPgRowType","foreignTable","pgIntrospection","fieldWithHooks","Self","kind","foreignKeyConstraints","constraint","filter","con","type","foreignClassId","id","foreignAttributes","attribute","attr","classId","sort","a","b","num","reduce","memo","table","classById","tableTypeName","tableType","name","namespace","gqlTableType","gqlForeignTableType","Error","schema","attributes","keys","keyAttributeNums","map","foreignKeys","foreignKeyAttributeNums","every","_","simpleKeys","column","k","class","fieldName","manyRelationByKeys","primaryKeyConstraint","primaryKeys","getDataFromParsedResolveInfoFragment","addDataGenerator","pgQuery","queryBuilder","select","resolveData","parsedResolveInfoFragment","ConnectionType","tableAlias","identifier","foreignTableAlias","getTableAlias","query","withPagination","withPaginationAsFields","innerQueryBuilder","beforeLock","isOrderUnique","data","cursorPrefix","forEach","orderBy","fragment","key","setOrderIsUnique","i","where","alias","connection","description","args","resolve","_args","_context","resolveInfo","isPgFieldConnection","pgFieldIntrospection"],"mappings":"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","file":"PgBackwardRelationPlugin.js","sourcesContent":["// @flow\nimport debugFactory from \"debug\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport addStartEndCursor from \"./addStartEndCursor\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgBackwardRelationPlugin(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        getAliasFromResolveInfo,\n        graphql: { GraphQLNonNull },\n      },\n      {\n        scope: { isPgRowType, pgIntrospection: foreignTable },\n        fieldWithHooks,\n        Self,\n      }\n    ) => {\n      if (!isPgRowType || !foreignTable || foreignTable.kind !== \"class\") {\n        return fields;\n      }\n      // This is a relation in which WE are foreign\n      const foreignKeyConstraints = introspectionResultsByKind.constraint\n        .filter(con => con.type === \"f\")\n        .filter(con => con.foreignClassId === foreignTable.id);\n      const foreignAttributes = introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === foreignTable.id)\n        .sort((a, b) => a.num - b.num);\n\n      return extend(\n        fields,\n        foreignKeyConstraints.reduce((memo, constraint) => {\n          const table =\n            introspectionResultsByKind.classById[constraint.classId];\n          const tableTypeName = inflection.tableType(\n            table.name,\n            table.namespace.name\n          );\n          const gqlTableType = pgGetGqlTypeByTypeId(table.type.id);\n          if (!gqlTableType) {\n            debug(\n              `Could not determine type for table with id ${constraint.classId}`\n            );\n            return memo;\n          }\n          const foreignTable =\n            introspectionResultsByKind.classById[constraint.foreignClassId];\n          const gqlForeignTableType = pgGetGqlTypeByTypeId(\n            foreignTable.type.id\n          );\n          if (!gqlForeignTableType) {\n            debug(\n              `Could not determine type for foreign table with id ${\n                constraint.foreignClassId\n              }`\n            );\n            return memo;\n          }\n          if (!table) {\n            throw new Error(\n              `Could not find the table that referenced us (constraint: ${\n                constraint.name\n              })`\n            );\n          }\n          const schema = table.namespace;\n\n          const attributes = introspectionResultsByKind.attribute.filter(\n            attr => attr.classId === table.id\n          );\n\n          const keys = constraint.keyAttributeNums.map(\n            num => attributes.filter(attr => attr.num === num)[0]\n          );\n          const foreignKeys = constraint.foreignKeyAttributeNums.map(\n            num => foreignAttributes.filter(attr => attr.num === num)[0]\n          );\n          if (!keys.every(_ => _) || !foreignKeys.every(_ => _)) {\n            throw new Error(\"Could not find key columns!\");\n          }\n\n          const simpleKeys = keys.map(k => ({\n            column: k.name,\n            table: k.class.name,\n            schema: k.class.namespace.name,\n          }));\n          const fieldName = inflection.manyRelationByKeys(\n            simpleKeys,\n            table.name,\n            table.namespace.name,\n            foreignTable.name,\n            foreignTable.namespace.name\n          );\n          const primaryKeyConstraint = introspectionResultsByKind.constraint\n            .filter(con => con.classId === table.id)\n            .filter(con => con.type === \"p\")[0];\n          const primaryKeys =\n            primaryKeyConstraint &&\n            primaryKeyConstraint.keyAttributeNums.map(\n              num => attributes.filter(attr => attr.num === num)[0]\n            );\n\n          memo[fieldName] = fieldWithHooks(\n            fieldName,\n            ({ getDataFromParsedResolveInfoFragment, addDataGenerator }) => {\n              addDataGenerator(parsedResolveInfoFragment => {\n                return {\n                  pgQuery: queryBuilder => {\n                    queryBuilder.select(() => {\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        ConnectionType\n                      );\n                      const tableAlias = sql.identifier(Symbol());\n                      const foreignTableAlias = queryBuilder.getTableAlias();\n                      const query = queryFromResolveData(\n                        sql.identifier(schema.name, table.name),\n                        tableAlias,\n                        resolveData,\n                        {\n                          withPagination: true,\n                          withPaginationAsFields: false,\n                        },\n                        innerQueryBuilder => {\n                          if (primaryKeys) {\n                            innerQueryBuilder.beforeLock(\"orderBy\", () => {\n                              // append order by primary key to the list of orders\n                              if (!innerQueryBuilder.isOrderUnique(false)) {\n                                innerQueryBuilder.data.cursorPrefix = [\n                                  \"primary_key_asc\",\n                                ];\n                                primaryKeys.forEach(key => {\n                                  innerQueryBuilder.orderBy(\n                                    sql.fragment`${innerQueryBuilder.getTableAlias()}.${sql.identifier(\n                                      key.name\n                                    )}`,\n                                    true\n                                  );\n                                });\n                                innerQueryBuilder.setOrderIsUnique();\n                              }\n                            });\n                          }\n\n                          keys.forEach((key, i) => {\n                            innerQueryBuilder.where(\n                              sql.fragment`${tableAlias}.${sql.identifier(\n                                key.name\n                              )} = ${foreignTableAlias}.${sql.identifier(\n                                foreignKeys[i].name\n                              )}`\n                            );\n                          });\n                        }\n                      );\n                      return sql.fragment`(${query})`;\n                    }, parsedResolveInfoFragment.alias);\n                  },\n                };\n              });\n              const ConnectionType = getTypeByName(\n                inflection.connection(gqlTableType.name)\n              );\n              return {\n                description: `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`,\n                type: new GraphQLNonNull(ConnectionType),\n                args: {},\n                resolve: (data, _args, _context, resolveInfo) => {\n                  const alias = getAliasFromResolveInfo(resolveInfo);\n                  return addStartEndCursor(data[alias]);\n                },\n              };\n            },\n            {\n              isPgFieldConnection: true,\n              pgFieldIntrospection: table,\n            }\n          );\n          return memo;\n        }, {}),\n        `Adding backward relations for ${Self.name}`\n      );\n    }\n  );\n}: Plugin);\n"]}