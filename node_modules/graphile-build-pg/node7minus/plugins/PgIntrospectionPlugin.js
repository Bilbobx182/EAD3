"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _freeze = require("babel-runtime/core-js/object/freeze");

var _freeze2 = _interopRequireDefault(_freeze);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _withPgClient = require("../withPgClient");

var _withPgClient2 = _interopRequireDefault(_withPgClient);

var _utils = require("../utils");

var _fs = require("fs");

var _pg = require("pg");

var _pg2 = _interopRequireDefault(_pg);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

var _package = require("../../package.json");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)("graphile-build-pg");

var INTROSPECTION_PATH = `${__dirname}/../../res/introspection-query.sql`;
var WATCH_FIXTURES_PATH = `${__dirname}/../../res/watch-fixtures.sql`;

// Ref: https://github.com/postgraphql/postgraphql/tree/master/src/postgres/introspection/object

function readFile(filename, encoding) {
  return new _promise2.default(function (resolve, reject) {
    (0, _fs.readFile)(filename, encoding, function (err, res) {
      if (err) reject(err);else resolve(res);
    });
  });
}

exports.default = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(builder, _ref) {
    var _this2 = this;

    var introspect = function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var _this = this;

        var cacheKey, cloneResults, introspectionResultsByKind, knownSchemas, missingSchemas, errorMessage, xByY, xByYAndZ, relate;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (Array.isArray(schemas)) {
                  _context2.next = 2;
                  break;
                }

                throw new Error("Argument 'schemas' (array) is required");

              case 2:
                cacheKey = `PgIntrospectionPlugin-introspectionResultsByKind-v${_package.version}`;

                cloneResults = function cloneResults(obj) {
                  var result = (0, _keys2.default)(obj).reduce(function (memo, k) {
                    memo[k] = obj[k].map(function (v) {
                      return (0, _assign2.default)({}, v);
                    });
                    return memo;
                  }, {});
                  return result;
                };

                _context2.t0 = cloneResults;
                _context2.next = 7;
                return persistentMemoizeWithKey(cacheKey, function () {
                  return (0, _withPgClient2.default)(pgConfig, function () {
                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(pgClient) {
                      var introspectionQuery, _ref5, rows, result, k;

                      return _regenerator2.default.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.next = 2;
                              return readFile(INTROSPECTION_PATH, "utf8");

                            case 2:
                              introspectionQuery = _context.sent;
                              _context.next = 5;
                              return pgClient.query(introspectionQuery, [schemas]);

                            case 5:
                              _ref5 = _context.sent;
                              rows = _ref5.rows;
                              result = rows.reduce(function (memo, _ref6) {
                                var object = _ref6.object;

                                memo[object.kind].push(object);
                                return memo;
                              }, {
                                namespace: [],
                                class: [],
                                attribute: [],
                                type: [],
                                constraint: [],
                                procedure: []
                              });

                              // Parse tags from comments

                              ["namespace", "class", "attribute", "type", "procedure"].forEach(function (kind) {
                                result[kind].forEach(function (object) {
                                  if (pgEnableTags && object.description) {
                                    var parsed = (0, _utils.parseTags)(object.description);
                                    object.tags = parsed.tags;
                                    object.description = parsed.text;
                                  } else {
                                    object.tags = {};
                                  }
                                });
                              });

                              for (k in result) {
                                result[k].map(_freeze2.default);
                              }
                              return _context.abrupt("return", (0, _freeze2.default)(result));

                            case 11:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, _this);
                    }));

                    return function (_x3) {
                      return _ref4.apply(this, arguments);
                    };
                  }());
                });

              case 7:
                _context2.t1 = _context2.sent;
                introspectionResultsByKind = (0, _context2.t0)(_context2.t1);
                knownSchemas = introspectionResultsByKind.namespace.map(function (n) {
                  return n.name;
                });
                missingSchemas = schemas.filter(function (s) {
                  return knownSchemas.indexOf(s) < 0;
                });

                if (!missingSchemas.length) {
                  _context2.next = 18;
                  break;
                }

                errorMessage = `You requested to use schema '${schemas.join("', '")}'; however we couldn't find some of those! Missing schemas are: '${missingSchemas.join("', '")}'`;

                if (!pgThrowOnMissingSchema) {
                  _context2.next = 17;
                  break;
                }

                throw new Error(errorMessage);

              case 17:
                console.warn("⚠️ WARNING⚠️  " + errorMessage); // eslint-disable-line no-console

              case 18:
                xByY = function xByY(arrayOfX, attrKey) {
                  return arrayOfX.reduce(function (memo, x) {
                    memo[x[attrKey]] = x;
                    return memo;
                  }, {});
                };

                xByYAndZ = function xByYAndZ(arrayOfX, attrKey, attrKey2) {
                  return arrayOfX.reduce(function (memo, x) {
                    memo[x[attrKey]] = memo[x[attrKey]] || {};
                    memo[x[attrKey]][x[attrKey2]] = x;
                    return memo;
                  }, {});
                };

                introspectionResultsByKind.namespaceById = xByY(introspectionResultsByKind.namespace, "id");
                introspectionResultsByKind.classById = xByY(introspectionResultsByKind.class, "id");
                introspectionResultsByKind.typeById = xByY(introspectionResultsByKind.type, "id");
                introspectionResultsByKind.attributeByClassIdAndNum = xByYAndZ(introspectionResultsByKind.attribute, "classId", "num");

                relate = function relate(array, newAttr, lookupAttr, lookup) {
                  var missingOk = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

                  array.forEach(function (entry) {
                    var key = entry[lookupAttr];
                    var result = lookup[key];
                    if (key && !result) {
                      if (missingOk) {
                        return;
                      }
                      throw new Error(`Could not look up '${newAttr}' by '${lookupAttr}' on '${(0, _stringify2.default)(entry)}'`);
                    }
                    entry[newAttr] = result;
                  });
                };

                relate(introspectionResultsByKind.class, "namespace", "namespaceId", introspectionResultsByKind.namespaceById, true // Because it could be a type defined in a different namespace - which is fine so long as we don't allow querying it directly
                );

                relate(introspectionResultsByKind.class, "type", "typeId", introspectionResultsByKind.typeById);

                relate(introspectionResultsByKind.attribute, "class", "classId", introspectionResultsByKind.classById);

                relate(introspectionResultsByKind.attribute, "type", "typeId", introspectionResultsByKind.typeById);

                relate(introspectionResultsByKind.procedure, "namespace", "namespaceId", introspectionResultsByKind.namespaceById);

                relate(introspectionResultsByKind.type, "class", "classId", introspectionResultsByKind.classById, true);

                relate(introspectionResultsByKind.type, "domainBaseType", "domainBaseTypeId", introspectionResultsByKind.typeById, true // Because not all types are domains
                );

                relate(introspectionResultsByKind.type, "arrayItemType", "arrayItemTypeId", introspectionResultsByKind.typeById, true // Because not all types are arrays
                );

                return _context2.abrupt("return", introspectionResultsByKind);

              case 34:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function introspect() {
        return _ref3.apply(this, arguments);
      };
    }();

    var pgConfig = _ref.pgConfig,
        schemas = _ref.pgSchemas,
        pgEnableTags = _ref.pgEnableTags,
        _ref$persistentMemoiz = _ref.persistentMemoizeWithKey,
        persistentMemoizeWithKey = _ref$persistentMemoiz === undefined ? function (key, fn) {
      return fn();
    } : _ref$persistentMemoiz,
        _ref$pgThrowOnMissing = _ref.pgThrowOnMissingSchema,
        pgThrowOnMissingSchema = _ref$pgThrowOnMissing === undefined ? false : _ref$pgThrowOnMissing;
    var introspectionResultsByKind, pgClient, releasePgClient, listener, stopListening;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            stopListening = function stopListening() {
              if (pgClient) {
                pgClient.query("unlisten postgraphql_watch").catch(function (e) {
                  debug(`Error occurred trying to unlisten watch: ${e}`);
                });
                pgClient.removeListener("notification", listener);
              }
              if (releasePgClient) {
                releasePgClient();
                pgClient = null;
              }
            };

            _context6.next = 3;
            return introspect();

          case 3:
            introspectionResultsByKind = _context6.sent;
            pgClient = void 0, releasePgClient = void 0, listener = void 0;


            builder.registerWatcher(function () {
              var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(triggerRebuild) {
                var watchSqlInner, sql, handleChange;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        _context5.next = 2;
                        return stopListening();

                      case 2:
                        if (!(pgConfig instanceof _pg2.default.Pool || (0, _withPgClient.quacksLikePgPool)(pgConfig))) {
                          _context5.next = 9;
                          break;
                        }

                        _context5.next = 5;
                        return pgConfig.connect();

                      case 5:
                        pgClient = _context5.sent;

                        releasePgClient = function releasePgClient() {
                          return pgClient && pgClient.release();
                        };
                        _context5.next = 18;
                        break;

                      case 9:
                        if (!(typeof pgConfig === "string")) {
                          _context5.next = 17;
                          break;
                        }

                        pgClient = new _pg2.default.Client(pgConfig);
                        pgClient.on("error", function (e) {
                          debug("pgClient error occurred: %s", e);
                        });
                        releasePgClient = function releasePgClient() {
                          return new _promise2.default(function (resolve, reject) {
                            if (pgClient) pgClient.end(function (err) {
                              return err ? reject(err) : resolve();
                            });else resolve();
                          });
                        };
                        _context5.next = 15;
                        return new _promise2.default(function (resolve, reject) {
                          if (pgClient) {
                            pgClient.connect(function (err) {
                              return err ? reject(err) : resolve();
                            });
                          } else {
                            resolve();
                          }
                        });

                      case 15:
                        _context5.next = 18;
                        break;

                      case 17:
                        throw new Error("Cannot watch schema with this configuration - need a string or pg.Pool");

                      case 18:
                        _context5.next = 20;
                        return readFile(WATCH_FIXTURES_PATH, "utf8");

                      case 20:
                        watchSqlInner = _context5.sent;
                        sql = `begin; ${watchSqlInner}; commit;`;
                        _context5.prev = 22;
                        _context5.next = 25;
                        return pgClient.query(sql);

                      case 25:
                        _context5.next = 36;
                        break;

                      case 27:
                        _context5.prev = 27;
                        _context5.t0 = _context5["catch"](22);

                        /* eslint-disable no-console */
                        console.warn(`${_chalk2.default.bold.yellow("Failed to setup watch fixtures in Postgres database")} ️️⚠️`);
                        console.warn(_chalk2.default.yellow("This is likely because your Postgres user is not a superuser. If the"));
                        console.warn(_chalk2.default.yellow("fixtures already exist, the watch functionality may still work."));
                        console.warn(_chalk2.default.yellow("Enable DEBUG='graphile-build-pg' to see the error"));
                        debug(_context5.t0);
                        /* eslint-enable no-console */
                        _context5.next = 36;
                        return pgClient.query("rollback");

                      case 36:
                        _context5.next = 38;
                        return pgClient.query("listen postgraphql_watch");

                      case 38:
                        handleChange = function () {
                          var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                            return _regenerator2.default.wrap(function _callee3$(_context3) {
                              while (1) {
                                switch (_context3.prev = _context3.next) {
                                  case 0:
                                    debug(`Schema change detected: re-inspecting schema...`);
                                    _context3.next = 3;
                                    return introspect();

                                  case 3:
                                    introspectionResultsByKind = _context3.sent;

                                    debug(`Schema change detected: re-inspecting schema complete`);
                                    triggerRebuild();

                                  case 6:
                                  case "end":
                                    return _context3.stop();
                                }
                              }
                            }, _callee3, _this2);
                          }));

                          return function handleChange() {
                            return _ref8.apply(this, arguments);
                          };
                        }();

                        listener = function () {
                          var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(notification) {
                            var payload, commands, affectsOurSchemas;
                            return _regenerator2.default.wrap(function _callee4$(_context4) {
                              while (1) {
                                switch (_context4.prev = _context4.next) {
                                  case 0:
                                    if (!(notification.channel !== "postgraphql_watch")) {
                                      _context4.next = 2;
                                      break;
                                    }

                                    return _context4.abrupt("return");

                                  case 2:
                                    _context4.prev = 2;
                                    payload = JSON.parse(notification.payload);

                                    payload.payload = payload.payload || [];

                                    if (!(payload.type === "ddl")) {
                                      _context4.next = 10;
                                      break;
                                    }

                                    commands = payload.payload.filter(function (_ref10) {
                                      var schema = _ref10.schema;
                                      return schema == null || schemas.indexOf(schema) >= 0;
                                    }).map(function (_ref11) {
                                      var command = _ref11.command;
                                      return command;
                                    });

                                    if (commands.length) {
                                      handleChange();
                                    }
                                    _context4.next = 16;
                                    break;

                                  case 10:
                                    if (!(payload.type === "drop")) {
                                      _context4.next = 15;
                                      break;
                                    }

                                    affectsOurSchemas = payload.payload.some(function (schemaName) {
                                      return schemas.indexOf(schemaName) >= 0;
                                    });

                                    if (affectsOurSchemas) {
                                      handleChange();
                                    }
                                    _context4.next = 16;
                                    break;

                                  case 15:
                                    throw new Error(`Payload type '${payload.type}' not recognised`);

                                  case 16:
                                    _context4.next = 21;
                                    break;

                                  case 18:
                                    _context4.prev = 18;
                                    _context4.t0 = _context4["catch"](2);

                                    debug(`Error occurred parsing notification payload: ${_context4.t0}`);

                                  case 21:
                                  case "end":
                                    return _context4.stop();
                                }
                              }
                            }, _callee4, _this2, [[2, 18]]);
                          }));

                          return function listener(_x6) {
                            return _ref9.apply(this, arguments);
                          };
                        }();
                        pgClient.on("notification", listener);
                        _context5.next = 43;
                        return introspect();

                      case 43:
                        introspectionResultsByKind = _context5.sent;

                      case 44:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, _this2, [[22, 27]]);
              }));

              return function (_x5) {
                return _ref7.apply(this, arguments);
              };
            }(), stopListening);

            builder.hook("build", function (build) {
              return build.extend(build, {
                pgIntrospectionResultsByKind: introspectionResultsByKind
              });
            });

          case 7:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  function PgIntrospectionPlugin(_x, _x2) {
    return _ref2.apply(this, arguments);
  }

  return PgIntrospectionPlugin;
}();
//# sourceMappingURL=PgIntrospectionPlugin.js.map