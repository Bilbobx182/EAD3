{"version":3,"sources":["../../src/plugins/PgForwardRelationPlugin.js"],"names":["debug","PgForwardRelationPlugin","builder","inflection","pgInflection","hook","fields","extend","getAliasFromResolveInfo","pgGetGqlTypeByTypeId","introspectionResultsByKind","pgIntrospectionResultsByKind","sql","pgSql","scope","isPgRowType","isMutationPayload","pgIntrospection","pgIntrospectionTable","fieldWithHooks","Self","table","kind","namespace","foreignKeyConstraints","constraint","filter","con","type","classId","id","attributes","attribute","attr","sort","a","b","num","reduce","memo","gqlTableType","tableTypeName","name","foreignTable","classById","foreignClassId","gqlForeignTableType","foreignTableTypeName","Error","foreignSchema","n","namespaceId","foreignAttributes","keys","keyAttributeNums","map","foreignKeys","foreignKeyAttributeNums","every","_","simpleKeys","column","k","class","schema","fieldName","singleRelationByKeys","getDataFromParsedResolveInfoFragment","addDataGenerator","pgQuery","queryBuilder","select","resolveData","parsedResolveInfoFragment","foreignTableAlias","identifier","query","asJson","forEach","key","i","innerQueryBuilder","where","fragment","getTableAlias","alias","description","resolve","rawData","_args","_context","resolveInfo","data","pgFieldIntrospection"],"mappings":"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","file":"PgForwardRelationPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\nimport queryFromResolveData from \"../queryFromResolveData\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgForwardRelationPlugin(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        extend,\n        getAliasFromResolveInfo,\n        pgGetGqlTypeByTypeId,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n      },\n      {\n        scope: {\n          isPgRowType,\n          isMutationPayload,\n          pgIntrospection,\n          pgIntrospectionTable,\n        },\n        fieldWithHooks,\n        Self,\n      }\n    ) => {\n      const table = pgIntrospectionTable || pgIntrospection;\n      if (\n        !(isPgRowType || isMutationPayload) ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace\n      ) {\n        return fields;\n      }\n      // This is a relation in which we (table) are local, and there's a foreign table\n\n      const foreignKeyConstraints = introspectionResultsByKind.constraint\n        .filter(con => con.type === \"f\")\n        .filter(con => con.classId === table.id);\n      const attributes = introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === table.id)\n        .sort((a, b) => a.num - b.num);\n\n      return extend(\n        fields,\n        foreignKeyConstraints.reduce((memo, constraint) => {\n          const gqlTableType = pgGetGqlTypeByTypeId(table.type.id);\n          const tableTypeName = gqlTableType.name;\n          if (!gqlTableType) {\n            debug(\n              `Could not determine type for table with id ${constraint.classId}`\n            );\n            return memo;\n          }\n          const foreignTable =\n            introspectionResultsByKind.classById[constraint.foreignClassId];\n          const gqlForeignTableType = pgGetGqlTypeByTypeId(\n            foreignTable.type.id\n          );\n          const foreignTableTypeName = gqlForeignTableType.name;\n          if (!gqlForeignTableType) {\n            debug(\n              `Could not determine type for foreign table with id ${\n                constraint.foreignClassId\n              }`\n            );\n            return memo;\n          }\n          if (!foreignTable) {\n            throw new Error(\n              `Could not find the foreign table (constraint: ${\n                constraint.name\n              })`\n            );\n          }\n          const foreignSchema = introspectionResultsByKind.namespace.filter(\n            n => n.id === foreignTable.namespaceId\n          )[0];\n          const foreignAttributes = introspectionResultsByKind.attribute\n            .filter(attr => attr.classId === constraint.foreignClassId)\n            .sort((a, b) => a.num - b.num);\n\n          const keys = constraint.keyAttributeNums.map(\n            num => attributes.filter(attr => attr.num === num)[0]\n          );\n          const foreignKeys = constraint.foreignKeyAttributeNums.map(\n            num => foreignAttributes.filter(attr => attr.num === num)[0]\n          );\n          if (!keys.every(_ => _) || !foreignKeys.every(_ => _)) {\n            throw new Error(\"Could not find key columns!\");\n          }\n\n          const simpleKeys = keys.map(k => ({\n            column: k.name,\n            table: k.class.name,\n            schema: k.class.namespace.name,\n          }));\n          const fieldName = inflection.singleRelationByKeys(\n            simpleKeys,\n            foreignTable.name,\n            foreignTable.namespace.name\n          );\n\n          memo[fieldName] = fieldWithHooks(\n            fieldName,\n            ({ getDataFromParsedResolveInfoFragment, addDataGenerator }) => {\n              addDataGenerator(parsedResolveInfoFragment => {\n                return {\n                  pgQuery: queryBuilder => {\n                    queryBuilder.select(() => {\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        gqlForeignTableType\n                      );\n                      const foreignTableAlias = sql.identifier(Symbol());\n                      const query = queryFromResolveData(\n                        sql.identifier(foreignSchema.name, foreignTable.name),\n                        foreignTableAlias,\n                        resolveData,\n                        { asJson: true },\n                        innerQueryBuilder => {\n                          keys.forEach((key, i) => {\n                            innerQueryBuilder.where(\n                              sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                key.name\n                              )} = ${foreignTableAlias}.${sql.identifier(\n                                foreignKeys[i].name\n                              )}`\n                            );\n                          });\n                        }\n                      );\n                      return sql.fragment`(${query})`;\n                    }, parsedResolveInfoFragment.alias);\n                  },\n                };\n              });\n              return {\n                description: `Reads a single \\`${foreignTableTypeName}\\` that is related to this \\`${tableTypeName}\\`.`,\n                type: gqlForeignTableType, // Nullable since RLS may forbid fetching\n                resolve: (rawData, _args, _context, resolveInfo) => {\n                  const data = isMutationPayload ? rawData.data : rawData;\n                  const alias = getAliasFromResolveInfo(resolveInfo);\n                  return data[alias];\n                },\n              };\n            },\n            {\n              pgFieldIntrospection: constraint,\n            }\n          );\n          return memo;\n        }, {}),\n        `Adding forward relations to '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}