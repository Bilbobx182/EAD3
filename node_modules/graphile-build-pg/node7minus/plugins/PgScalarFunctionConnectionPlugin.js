"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var base64 = function base64(str) {
  return new Buffer(String(str)).toString("base64");
};

exports.default = function PgTablesPlugin(builder, _ref) {
  var inflection = _ref.pgInflection;

  builder.hook("init", function (_, _ref2) {
    var newWithHooks = _ref2.newWithHooks,
        introspectionResultsByKind = _ref2.pgIntrospectionResultsByKind,
        getTypeByName = _ref2.getTypeByName,
        pgGetGqlTypeByTypeId = _ref2.pgGetGqlTypeByTypeId,
        _ref2$graphql = _ref2.graphql,
        GraphQLObjectType = _ref2$graphql.GraphQLObjectType,
        GraphQLNonNull = _ref2$graphql.GraphQLNonNull,
        GraphQLList = _ref2$graphql.GraphQLList,
        GraphQLString = _ref2$graphql.GraphQLString;

    var Cursor = getTypeByName("Cursor");
    introspectionResultsByKind.procedure.filter(function (proc) {
      return proc.returnsSet;
    }).filter(function (proc) {
      return !!proc.namespace;
    }).forEach(function (proc) {
      var returnType = introspectionResultsByKind.typeById[proc.returnTypeId];
      var returnTypeTable = introspectionResultsByKind.classById[returnType.classId];
      if (returnTypeTable) {
        // Just use the standard table connection from PgTablesPlugin
        return;
      }
      var NodeType = pgGetGqlTypeByTypeId(returnType.id) || GraphQLString;
      var EdgeType = newWithHooks(GraphQLObjectType, {
        name: inflection.scalarFunctionEdge(proc.name, proc.namespace.name),
        description: `A \`${NodeType.name}\` edge in the connection.`,
        fields: function fields(_ref3) {
          var fieldWithHooks = _ref3.fieldWithHooks;

          return {
            cursor: fieldWithHooks("cursor", function (_ref4) {
              var addDataGenerator = _ref4.addDataGenerator;

              addDataGenerator(function () {
                return {
                  usesCursor: [true]
                };
              });
              return {
                description: "A cursor for use in pagination.",
                type: Cursor,
                resolve(data) {
                  return base64((0, _stringify2.default)(data.__cursor));
                }
              };
            }, {
              isCursorField: true
            }),
            node: {
              description: `The \`${NodeType.name}\` at the end of the edge.`,
              type: NodeType,
              resolve(data) {
                return data.value;
              }
            }
          };
        }
      }, {
        isEdgeType: true,
        nodeType: NodeType,
        pgIntrospection: proc
      });
      /*const ConnectionType = */
      newWithHooks(GraphQLObjectType, {
        name: inflection.scalarFunctionConnection(proc.name, proc.namespace.name),
        description: `A connection to a list of \`${NodeType.name}\` values.`,
        fields: function fields(_ref5) {
          var recurseDataGeneratorsForField = _ref5.recurseDataGeneratorsForField;

          recurseDataGeneratorsForField("edges");
          recurseDataGeneratorsForField("nodes");
          return {
            nodes: {
              description: `A list of \`${NodeType.name}\` objects.`,
              type: new GraphQLNonNull(new GraphQLList(NodeType)),
              resolve(data) {
                return data.data.map(function (entry) {
                  return entry.value;
                });
              }
            },
            edges: {
              description: `A list of edges which contains the \`${NodeType.name}\` and cursor to aid in pagination.`,
              type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(EdgeType))),
              resolve(data) {
                return data.data;
              }
            }
          };
        }
      }, {
        isConnectionType: true,
        edgeType: EdgeType,
        nodeType: NodeType,
        pgIntrospection: proc
      });
    });
    return _;
  });
};
//# sourceMappingURL=PgScalarFunctionConnectionPlugin.js.map