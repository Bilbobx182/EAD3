"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _queryFromResolveData = require("../queryFromResolveData");

var _queryFromResolveData2 = _interopRequireDefault(_queryFromResolveData);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _addStartEndCursor = require("./addStartEndCursor");

var _addStartEndCursor2 = _interopRequireDefault(_addStartEndCursor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debugSql = (0, _debug2.default)("graphile-build-pg:sql");

exports.default = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(builder, _ref) {
    var inflection = _ref.pgInflection,
        viewUniqueKey = _ref.pgViewUniqueKey;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            builder.hook("GraphQLObjectType:fields", function (fields, _ref3, _ref4) {
              var parseResolveInfo = _ref3.parseResolveInfo,
                  extend = _ref3.extend,
                  getTypeByName = _ref3.getTypeByName,
                  pgGetGqlTypeByTypeId = _ref3.pgGetGqlTypeByTypeId,
                  sql = _ref3.pgSql,
                  introspectionResultsByKind = _ref3.pgIntrospectionResultsByKind;
              var fieldWithHooks = _ref4.fieldWithHooks,
                  isRootQuery = _ref4.scope.isRootQuery;

              if (!isRootQuery) {
                return fields;
              }
              return extend(fields, introspectionResultsByKind.class.filter(function (table) {
                return table.isSelectable;
              }).filter(function (table) {
                return table.namespace;
              }).reduce(function (memo, table) {
                var TableType = pgGetGqlTypeByTypeId(table.type.id);
                var tableTypeName = TableType.name;
                var ConnectionType = getTypeByName(inflection.connection(TableType.name));
                if (!TableType) {
                  throw new Error(`Could not find GraphQL type for table '${table.name}'`);
                }
                var attributes = introspectionResultsByKind.attribute.filter(function (attr) {
                  return attr.classId === table.id;
                });
                var primaryKeyConstraint = introspectionResultsByKind.constraint.filter(function (con) {
                  return con.classId === table.id;
                }).filter(function (con) {
                  return con.type === "p";
                })[0];
                var primaryKeys = primaryKeyConstraint && primaryKeyConstraint.keyAttributeNums.map(function (num) {
                  return attributes.filter(function (attr) {
                    return attr.num === num;
                  })[0];
                });
                var isView = function isView(t) {
                  return t.classKind === "v";
                };
                var uniqueIdAttribute = viewUniqueKey ? attributes.find(function (attr) {
                  return attr.name === viewUniqueKey;
                }) : undefined;
                if (!ConnectionType) {
                  throw new Error(`Could not find GraphQL connection type for table '${table.name}'`);
                }
                var schema = table.namespace;
                var sqlFullTableName = sql.identifier(schema.name, table.name);
                if (TableType && ConnectionType) {
                  var fieldName = inflection.allRows(table.name, schema.name);
                  memo[fieldName] = fieldWithHooks(fieldName, function (_ref5) {
                    var getDataFromParsedResolveInfoFragment = _ref5.getDataFromParsedResolveInfoFragment;

                    return {
                      description: `Reads and enables pagination through a set of \`${tableTypeName}\`.`,
                      type: ConnectionType,
                      args: {},
                      resolve(parent, args, _ref6, resolveInfo) {
                        var _this = this;

                        return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                          var pgClient = _ref6.pgClient;

                          var parsedResolveInfoFragment, resolveData, query, _sql$compile, text, values, _ref7, _ref7$rows, row;

                          return _regenerator2.default.wrap(function _callee$(_context) {
                            while (1) {
                              switch (_context.prev = _context.next) {
                                case 0:
                                  parsedResolveInfoFragment = parseResolveInfo(resolveInfo);
                                  resolveData = getDataFromParsedResolveInfoFragment(parsedResolveInfoFragment, resolveInfo.returnType);
                                  query = (0, _queryFromResolveData2.default)(sqlFullTableName, undefined, resolveData, {
                                    withPaginationAsFields: true
                                  }, function (builder) {
                                    if (primaryKeys) {
                                      builder.beforeLock("orderBy", function () {
                                        if (!builder.isOrderUnique(false)) {
                                          // Order by PK if no order specified
                                          builder.data.cursorPrefix = ["primary_key_asc"];
                                          primaryKeys.forEach(function (key) {
                                            builder.orderBy(sql.fragment`${builder.getTableAlias()}.${sql.identifier(key.name)}`, true);
                                          });
                                          builder.setOrderIsUnique();
                                        }
                                      });
                                    } else if (isView(table) && !!uniqueIdAttribute) {
                                      builder.beforeLock("orderBy", function () {
                                        if (!builder.isOrderUnique(false)) {
                                          builder.data.cursorPrefix = ["view_unique_key_asc"];
                                          builder.orderBy(sql.fragment`${builder.getTableAlias()}.${sql.identifier(uniqueIdAttribute.name)}`, true);
                                          builder.setOrderIsUnique();
                                        }
                                      });
                                    }
                                  });
                                  _sql$compile = sql.compile(query), text = _sql$compile.text, values = _sql$compile.values;

                                  if (debugSql.enabled) debugSql(text);
                                  _context.next = 7;
                                  return pgClient.query(text, values);

                                case 7:
                                  _ref7 = _context.sent;
                                  _ref7$rows = (0, _slicedToArray3.default)(_ref7.rows, 1);
                                  row = _ref7$rows[0];
                                  return _context.abrupt("return", (0, _addStartEndCursor2.default)(row));

                                case 11:
                                case "end":
                                  return _context.stop();
                              }
                            }
                          }, _callee, _this);
                        }))();
                      }
                    };
                  }, {
                    isPgFieldConnection: true,
                    pgFieldIntrospection: table
                  });
                }
                return memo;
              }, {}), `Adding 'all*' relations to root Query`);
            });

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function PgAllRows(_x, _x2) {
    return _ref2.apply(this, arguments);
  }

  return PgAllRows;
}();
//# sourceMappingURL=PgAllRows.js.map