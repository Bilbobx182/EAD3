"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.default = makeProcField;

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _camelCase = require("lodash/camelCase");

var _camelCase2 = _interopRequireDefault(_camelCase);

var _pluralize = require("pluralize");

var _pluralize2 = _interopRequireDefault(_pluralize);

var _queryFromResolveData = require("../queryFromResolveData");

var _queryFromResolveData2 = _interopRequireDefault(_queryFromResolveData);

var _addStartEndCursor = require("./addStartEndCursor");

var _addStartEndCursor2 = _interopRequireDefault(_addStartEndCursor);

var _viaTemporaryTable = require("./viaTemporaryTable");

var _viaTemporaryTable2 = _interopRequireDefault(_viaTemporaryTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debugSql = (0, _debug2.default)("graphile-build-pg:sql");
var firstValue = function firstValue(obj) {
  var firstKey = void 0;
  for (var k in obj) {
    firstKey = k;
  }
  return obj[firstKey];
};

function makeProcField(fieldName, proc, _ref, _ref2) {
  var _this = this;

  var introspectionResultsByKind = _ref.pgIntrospectionResultsByKind,
      pgGetGqlTypeByTypeId = _ref.pgGetGqlTypeByTypeId,
      pgGetGqlInputTypeByTypeId = _ref.pgGetGqlInputTypeByTypeId,
      getTypeByName = _ref.getTypeByName,
      sql = _ref.pgSql,
      parseResolveInfo = _ref.parseResolveInfo,
      getAliasFromResolveInfo = _ref.getAliasFromResolveInfo,
      gql2pg = _ref.gql2pg,
      pg2gql = _ref.pg2gql,
      newWithHooks = _ref.newWithHooks,
      inflection = _ref.pgInflection,
      strictFunctions = _ref.pgStrictFunctions,
      pgTweakFragmentForType = _ref.pgTweakFragmentForType,
      _ref$graphql = _ref.graphql,
      GraphQLNonNull = _ref$graphql.GraphQLNonNull,
      GraphQLList = _ref$graphql.GraphQLList,
      GraphQLString = _ref$graphql.GraphQLString,
      GraphQLInt = _ref$graphql.GraphQLInt,
      GraphQLFloat = _ref$graphql.GraphQLFloat,
      GraphQLBoolean = _ref$graphql.GraphQLBoolean,
      GraphQLObjectType = _ref$graphql.GraphQLObjectType,
      GraphQLInputObjectType = _ref$graphql.GraphQLInputObjectType,
      getNamedType = _ref$graphql.getNamedType,
      isCompositeType = _ref$graphql.isCompositeType;
  var fieldWithHooks = _ref2.fieldWithHooks,
      _ref2$computed = _ref2.computed,
      computed = _ref2$computed === undefined ? false : _ref2$computed,
      _ref2$isMutation = _ref2.isMutation,
      isMutation = _ref2$isMutation === undefined ? false : _ref2$isMutation;

  function getResultFieldName(gqlType, type, returnsSet) {
    var gqlNamedType = getNamedType(gqlType);
    var name = void 0;
    if (gqlNamedType === GraphQLInt) {
      name = "integer";
    } else if (gqlNamedType === GraphQLFloat) {
      name = "float";
    } else if (gqlNamedType === GraphQLBoolean) {
      name = "boolean";
    } else if (gqlNamedType === GraphQLString) {
      name = "string";
    } else {
      name = (0, _camelCase2.default)(gqlNamedType.name);
    }
    return returnsSet || type.isPgArray ? (0, _pluralize2.default)(name) : name;
  }
  if (computed && isMutation) {
    throw new Error("Mutation procedure cannot be computed");
  }
  var sliceAmount = computed ? 1 : 0;
  var argNames = proc.argTypeIds.slice(sliceAmount).map(function (_, idx) {
    return proc.argNames[idx + sliceAmount] || "";
  });
  var argTypes = proc.argTypeIds.slice(sliceAmount).map(function (typeId) {
    return introspectionResultsByKind.typeById[typeId];
  });
  var requiredArgCount = Math.max(0, argNames.length - proc.argDefaultsNum);
  var notNullArgCount = proc.isStrict || strictFunctions ? requiredArgCount : 0;
  var argGqlTypes = argTypes.map(function (type, idx) {
    var Type = pgGetGqlInputTypeByTypeId(type.id) || GraphQLString;
    if (idx >= notNullArgCount) {
      return Type;
    } else {
      return new GraphQLNonNull(Type);
    }
  });

  var rawReturnType = introspectionResultsByKind.typeById[proc.returnTypeId];
  var returnType = rawReturnType.isPgArray ? rawReturnType.arrayItemType : rawReturnType;
  var returnTypeTable = introspectionResultsByKind.classById[returnType.classId];
  if (!returnType) {
    throw new Error(`Could not determine return type for function '${proc.name}'`);
  }
  var type = void 0;
  var fieldScope = {};
  var payloadTypeScope = {};
  fieldScope.pgFieldIntrospection = proc;
  payloadTypeScope.pgIntrospection = proc;
  var returnFirstValueAsValue = false;
  var TableType = returnTypeTable && pgGetGqlTypeByTypeId(returnTypeTable.type.id);

  var isTableLike = TableType && isCompositeType(TableType) || false;
  if (isTableLike) {
    if (proc.returnsSet) {
      if (isMutation) {
        type = new GraphQLList(TableType);
      } else {
        var ConnectionType = getTypeByName(inflection.connection(TableType.name));
        if (!ConnectionType) {
          throw new Error(`Do not have a connection type '${inflection.connection(TableType.name)}' for '${TableType.name}' so cannot create procedure field`);
        }
        type = new GraphQLNonNull(ConnectionType);
        fieldScope.isPgFieldConnection = true;
      }
      fieldScope.pgFieldIntrospectionTable = returnTypeTable;
      payloadTypeScope.pgIntrospectionTable = returnTypeTable;
    } else {
      type = TableType;
      if (rawReturnType.isPgArray) {
        type = new GraphQLList(type);
      }
      fieldScope.pgFieldIntrospectionTable = returnTypeTable;
      payloadTypeScope.pgIntrospectionTable = returnTypeTable;
    }
  } else {
    var Type = pgGetGqlTypeByTypeId(returnType.id) || GraphQLString;
    if (proc.returnsSet) {
      var connectionTypeName = inflection.scalarFunctionConnection(proc.name, proc.namespace.name);
      var _ConnectionType = getTypeByName(connectionTypeName);
      if (_ConnectionType) {
        if (isMutation) {
          // Cannot return a connection because it would have to run the mutation again
          type = new GraphQLList(Type);
          returnFirstValueAsValue = true;
        } else {
          type = new GraphQLNonNull(_ConnectionType);
          fieldScope.isPgFieldConnection = true;
        }
      } else {
        returnFirstValueAsValue = true;
        type = new GraphQLList(Type);
      }
    } else {
      returnFirstValueAsValue = true;
      type = Type;
      if (rawReturnType.isPgArray) {
        type = new GraphQLList(type);
      }
    }
  }
  return fieldWithHooks(fieldName, function (_ref3) {
    var addDataGenerator = _ref3.addDataGenerator,
        getDataFromParsedResolveInfoFragment = _ref3.getDataFromParsedResolveInfoFragment,
        addArgDataGenerator = _ref3.addArgDataGenerator;

    if (proc.returnsSet && !isTableLike && !returnFirstValueAsValue && !isMutation) {
      // Natural ordering
      addArgDataGenerator(function addPgCursorPrefix() {
        return {
          pgCursorPrefix: sql.literal("natural")
        };
      });
    }
    function makeMutationCall(parsedResolveInfoFragment, ReturnType) {
      var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref4$implicitArgs = _ref4.implicitArgs,
          implicitArgs = _ref4$implicitArgs === undefined ? [] : _ref4$implicitArgs;

      var _parsedResolveInfoFra = parsedResolveInfoFragment.args,
          rawArgs = _parsedResolveInfoFra === undefined ? {} : _parsedResolveInfoFra;

      var args = isMutation ? rawArgs.input : rawArgs;
      var sqlArgValues = [];
      var haveNames = true;
      for (var argIndex = argNames.length - 1; argIndex >= 0; argIndex--) {
        var argName = argNames[argIndex];
        var gqlArgName = inflection.argument(argName, argIndex);
        var value = args[gqlArgName];
        var sqlValue = gql2pg(value, argTypes[argIndex]);
        if (argIndex + 1 > requiredArgCount && haveNames && value == null) {
          // No need to pass argument to function
          continue;
        } else if (argIndex + 1 > requiredArgCount && haveNames) {
          var sqlArgName = argName ? sql.identifier(argName) : null;
          if (sqlArgName) {
            sqlArgValues.unshift(sql.fragment`${sqlArgName} := ${sqlValue}`);
          } else {
            haveNames = false;
            sqlArgValues.unshift(sqlValue);
          }
        } else {
          sqlArgValues.unshift(sqlValue);
        }
      }
      return sql.fragment`${sql.identifier(proc.namespace.name, proc.name)}(${sql.join([].concat((0, _toConsumableArray3.default)(implicitArgs), sqlArgValues), ", ")})`;
    }
    function makeQuery(parsedResolveInfoFragment, ReturnType, sqlMutationQuery, functionAlias) {
      var resolveData = getDataFromParsedResolveInfoFragment(parsedResolveInfoFragment, ReturnType);
      var query = (0, _queryFromResolveData2.default)(sqlMutationQuery, functionAlias, resolveData, {
        withPagination: !isMutation && proc.returnsSet,
        withPaginationAsFields: !isMutation && proc.returnsSet && !computed,
        asJson: !proc.returnsSet && computed && !returnFirstValueAsValue,
        addNullCase: !proc.returnsSet && isTableLike
      }, function (innerQueryBuilder) {
        if (!isTableLike) {
          if (returnTypeTable) {
            innerQueryBuilder.select(pgTweakFragmentForType(sql.fragment`${functionAlias}`, returnTypeTable.type), "value");
          } else {
            innerQueryBuilder.select(pgTweakFragmentForType(sql.fragment`${functionAlias}.${functionAlias}`, returnType), "value");
          }
        }
      });
      return query;
    }
    if (computed) {
      addDataGenerator(function (parsedResolveInfoFragment, ReturnType) {
        return {
          pgQuery: function pgQuery(queryBuilder) {
            queryBuilder.select(function () {
              var parentTableAlias = queryBuilder.getTableAlias();
              var functionAlias = sql.identifier((0, _symbol2.default)());
              var sqlMutationQuery = makeMutationCall(parsedResolveInfoFragment, ReturnType, {
                implicitArgs: [parentTableAlias]
              });
              var query = makeQuery(parsedResolveInfoFragment, ReturnType, sqlMutationQuery, functionAlias);
              return sql.fragment`(${query})`;
            }, parsedResolveInfoFragment.alias);
          }
        };
      });
    }

    var ReturnType = type;
    var PayloadType = void 0;
    var args = argNames.reduce(function (memo, argName, argIndex) {
      var gqlArgName = inflection.argument(argName, argIndex);
      memo[gqlArgName] = {
        type: argGqlTypes[argIndex]
      };
      return memo;
    }, {});
    if (isMutation) {
      var resultFieldName = getResultFieldName(type, rawReturnType, proc.returnsSet);
      var isNotVoid = String(returnType.id) !== "2278";
      // If set then plural name
      PayloadType = newWithHooks(GraphQLObjectType, {
        name: inflection.functionPayloadType(proc.name, proc.namespace.name),
        description: `The output of our \`${inflection.functionName(proc.name, proc.namespace.name)}\` mutation.`,
        fields: function fields(_ref5) {
          var recurseDataGeneratorsForField = _ref5.recurseDataGeneratorsForField;

          if (isNotVoid) {
            recurseDataGeneratorsForField(resultFieldName);
          }
          return (0, _assign2.default)({}, {
            clientMutationId: {
              type: GraphQLString
            }
          }, isNotVoid ? {
            [resultFieldName]: {
              type: type,
              resolve(data) {
                return data.data;
              }
            }
            // Result
          } : null);
        }
      }, (0, _assign2.default)({}, {
        isMutationPayload: true
      }, payloadTypeScope));
      ReturnType = PayloadType;
      var InputType = newWithHooks(GraphQLInputObjectType, {
        name: inflection.functionInputType(proc.name, proc.namespace.name),
        description: `All input for the \`${inflection.functionName(proc.name, proc.namespace.name)}\` mutation.`,
        fields: (0, _assign2.default)({
          clientMutationId: {
            type: GraphQLString
          }
        }, args)
      }, {
        isMutationInput: true
      });
      args = {
        input: {
          type: new GraphQLNonNull(InputType)
        }
      };
    }

    return {
      description: proc.description ? proc.description : isTableLike && proc.returnsSet ? `Reads and enables pagination through a set of \`${TableType.name}\`.` : null,
      type: ReturnType,
      args: args,
      resolve: computed ? function (data, _args, _context, resolveInfo) {
        var alias = getAliasFromResolveInfo(resolveInfo);
        var value = data[alias];
        if (returnFirstValueAsValue) {
          if (proc.returnsSet) {
            return value.data.map(firstValue).map(function (v) {
              return pg2gql(v, returnType);
            });
          } else {
            return pg2gql(value, returnType);
          }
        } else {
          if (proc.returnsSet && !isMutation) {
            return (0, _addStartEndCursor2.default)(value);
          } else {
            return value;
          }
        }
      } : function () {
        var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(data, args, _ref6, resolveInfo) {
          var pgClient = _ref6.pgClient;

          var parsedResolveInfoFragment, functionAlias, sqlMutationQuery, queryResult, query, _returnType, intermediateIdentifier, isVoid, isPgClass, _query, _sql$compile, text, values, _queryResult, rows, _rows, row, result;

          return _regenerator2.default.wrap(function _callee$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  parsedResolveInfoFragment = parseResolveInfo(resolveInfo);
                  functionAlias = sql.identifier((0, _symbol2.default)());
                  sqlMutationQuery = makeMutationCall(parsedResolveInfoFragment, resolveInfo.returnType, {});
                  queryResult = void 0;

                  if (!isMutation) {
                    _context2.next = 27;
                    break;
                  }

                  query = makeQuery(parsedResolveInfoFragment, resolveInfo.returnType, functionAlias, functionAlias);
                  _returnType = rawReturnType;
                  intermediateIdentifier = sql.identifier((0, _symbol2.default)());
                  isVoid = _returnType.id === "2278";
                  isPgClass = !returnFirstValueAsValue || returnTypeTable || false;
                  _context2.prev = 10;
                  _context2.next = 13;
                  return pgClient.query("SAVEPOINT graphql_mutation");

                case 13:
                  _context2.next = 15;
                  return (0, _viaTemporaryTable2.default)(pgClient, isVoid ? null : sql.identifier(_returnType.namespaceName, _returnType.name), sql.query`select ${isPgClass ? sql.query`${intermediateIdentifier}.*` : sql.query`${intermediateIdentifier}.${intermediateIdentifier} as ${functionAlias}`} from ${sqlMutationQuery} ${intermediateIdentifier}`, functionAlias, query, isPgClass);

                case 15:
                  queryResult = _context2.sent;
                  _context2.next = 18;
                  return pgClient.query("RELEASE SAVEPOINT graphql_mutation");

                case 18:
                  _context2.next = 25;
                  break;

                case 20:
                  _context2.prev = 20;
                  _context2.t0 = _context2["catch"](10);
                  _context2.next = 24;
                  return pgClient.query("ROLLBACK TO SAVEPOINT graphql_mutation");

                case 24:
                  throw _context2.t0;

                case 25:
                  _context2.next = 33;
                  break;

                case 27:
                  _query = makeQuery(parsedResolveInfoFragment, resolveInfo.returnType, sqlMutationQuery, functionAlias);
                  _sql$compile = sql.compile(_query), text = _sql$compile.text, values = _sql$compile.values;

                  if (debugSql.enabled) debugSql(text);
                  _context2.next = 32;
                  return pgClient.query(text, values);

                case 32:
                  queryResult = _context2.sent;

                case 33:
                  _queryResult = queryResult, rows = _queryResult.rows;
                  _rows = (0, _slicedToArray3.default)(rows, 1), row = _rows[0];

                  result = function () {
                    if (returnFirstValueAsValue) {
                      if (proc.returnsSet && !isMutation) {
                        return row.data.map(firstValue).map(function (v) {
                          return pg2gql(v, returnType);
                        });
                      } else if (proc.returnsSet) {
                        return rows.map(firstValue).map(function (v) {
                          return pg2gql(v, returnType);
                        });
                      } else {
                        return pg2gql(firstValue(row), returnType);
                      }
                    } else {
                      if (proc.returnsSet && !isMutation) {
                        // Connection
                        return (0, _addStartEndCursor2.default)(row);
                      } else if (proc.returnsSet) {
                        return rows;
                      } else {
                        return row;
                      }
                    }
                  }();

                  if (!isMutation) {
                    _context2.next = 40;
                    break;
                  }

                  return _context2.abrupt("return", {
                    clientMutationId: args.input.clientMutationId,
                    data: result
                  });

                case 40:
                  return _context2.abrupt("return", result);

                case 41:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee, _this, [[10, 20]]);
        }));

        return function (_x2, _x3, _x4, _x5) {
          return _ref7.apply(this, arguments);
        };
      }()
    };
  }, fieldScope);
}
//# sourceMappingURL=makeProcField.js.map