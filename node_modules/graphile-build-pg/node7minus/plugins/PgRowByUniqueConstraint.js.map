{"version":3,"sources":["../../src/plugins/PgRowByUniqueConstraint.js"],"names":["debugSql","builder","inflection","pgInflection","hook","fields","extend","parseResolveInfo","pgGetGqlTypeByTypeId","pgGetGqlInputTypeByTypeId","gql2pg","introspectionResultsByKind","pgIntrospectionResultsByKind","sql","pgSql","GraphQLNonNull","graphql","isRootQuery","scope","fieldWithHooks","class","filter","table","namespace","reduce","memo","TableType","type","id","sqlFullTableName","identifier","name","uniqueConstraints","constraint","con","classId","attributes","attribute","attr","sort","a","b","num","forEach","keys","keyAttributeNums","map","every","_","Error","simpleKeys","column","k","schema","fieldName","rowByUniqueKeys","getDataFromParsedResolveInfoFragment","args","key","InputType","typeId","resolve","parent","resolveInfo","pgClient","parsedResolveInfoFragment","resolveData","query","undefined","where","fragment","getTableAlias","compile","text","values","enabled","rows","row","isPgRowByUniqueConstraintField","pgFieldIntrospection","PgRowByUniqueConstraint"],"mappings":"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","file":"PgRowByUniqueConstraint.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgRowByUniqueConstraint(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        extend,\n        parseResolveInfo,\n        pgGetGqlTypeByTypeId,\n        pgGetGqlInputTypeByTypeId,\n        gql2pg,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        graphql: { GraphQLNonNull },\n      },\n      { scope: { isRootQuery }, fieldWithHooks }\n    ) => {\n      if (!isRootQuery) {\n        return fields;\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.class\n          .filter(table => !!table.namespace)\n          .reduce((memo, table) => {\n            const TableType = pgGetGqlTypeByTypeId(table.type.id);\n            const sqlFullTableName = sql.identifier(\n              table.namespace.name,\n              table.name\n            );\n            if (TableType) {\n              const uniqueConstraints = introspectionResultsByKind.constraint\n                .filter(con => con.classId === table.id)\n                .filter(con => con.type === \"u\" || con.type === \"p\");\n              const attributes = introspectionResultsByKind.attribute\n                .filter(attr => attr.classId === table.id)\n                .sort((a, b) => a.num - b.num);\n              uniqueConstraints.forEach(constraint => {\n                const keys = constraint.keyAttributeNums.map(\n                  num => attributes.filter(attr => attr.num === num)[0]\n                );\n                if (!keys.every(_ => _)) {\n                  throw new Error(\n                    \"Consistency error: could not find an attribute!\"\n                  );\n                }\n                const simpleKeys = keys.map(k => ({\n                  column: k.name,\n                  table: k.class.name,\n                  schema: k.class.namespace.name,\n                }));\n                const fieldName = inflection.rowByUniqueKeys(\n                  simpleKeys,\n                  table.name,\n                  table.namespace.name\n                );\n                memo[fieldName] = fieldWithHooks(\n                  fieldName,\n                  ({ getDataFromParsedResolveInfoFragment }) => {\n                    return {\n                      type: TableType,\n                      args: keys.reduce((memo, key) => {\n                        const InputType = pgGetGqlInputTypeByTypeId(key.typeId);\n                        if (!InputType) {\n                          throw new Error(\n                            `Could not find input type for key '${\n                              key.name\n                            }' on type '${TableType.name}'`\n                          );\n                        }\n                        memo[\n                          inflection.column(\n                            key.name,\n                            key.class.name,\n                            key.class.namespace.name\n                          )\n                        ] = {\n                          type: new GraphQLNonNull(InputType),\n                        };\n                        return memo;\n                      }, {}),\n                      async resolve(parent, args, { pgClient }, resolveInfo) {\n                        const parsedResolveInfoFragment = parseResolveInfo(\n                          resolveInfo\n                        );\n                        const resolveData = getDataFromParsedResolveInfoFragment(\n                          parsedResolveInfoFragment,\n                          TableType\n                        );\n                        const query = queryFromResolveData(\n                          sqlFullTableName,\n                          undefined,\n                          resolveData,\n                          {},\n                          builder => {\n                            keys.forEach(key => {\n                              builder.where(\n                                sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                  key.name\n                                )} = ${gql2pg(\n                                  args[\n                                    inflection.column(\n                                      key.name,\n                                      key.class.name,\n                                      key.class.namespace.name\n                                    )\n                                  ],\n                                  key.type\n                                )}`\n                              );\n                            });\n                          }\n                        );\n                        const { text, values } = sql.compile(query);\n                        if (debugSql.enabled) debugSql(text);\n                        const { rows: [row] } = await pgClient.query(\n                          text,\n                          values\n                        );\n                        return row;\n                      },\n                    };\n                  },\n                  {\n                    isPgRowByUniqueConstraintField: true,\n                    pgFieldIntrospection: constraint,\n                  }\n                );\n              });\n            }\n            return memo;\n          }, {}),\n        `Adding \"row by unique constraint\" fields to root Query type`\n      );\n    }\n  );\n}: Plugin);\n"]}