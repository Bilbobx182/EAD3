{"version":3,"sources":["../../src/plugins/PgAllRows.js"],"names":["debugSql","builder","inflection","pgInflection","viewUniqueKey","pgViewUniqueKey","hook","fields","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeId","sql","pgSql","introspectionResultsByKind","pgIntrospectionResultsByKind","fieldWithHooks","isRootQuery","scope","class","filter","table","isSelectable","namespace","reduce","memo","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","attribute","attr","classId","primaryKeyConstraint","constraint","con","primaryKeys","keyAttributeNums","map","num","isView","t","classKind","uniqueIdAttribute","find","undefined","schema","sqlFullTableName","identifier","fieldName","allRows","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","resolveInfo","pgClient","parsedResolveInfoFragment","resolveData","returnType","query","withPaginationAsFields","beforeLock","isOrderUnique","data","cursorPrefix","forEach","orderBy","fragment","getTableAlias","key","setOrderIsUnique","compile","text","values","enabled","rows","row","isPgFieldConnection","pgFieldIntrospection","PgAllRows"],"mappings":"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","file":"PgAllRows.js","sourcesContent":["// @flow\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nimport addStartEndCursor from \"./addStartEndCursor\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgAllRows(\n  builder,\n  { pgInflection: inflection, pgViewUniqueKey: viewUniqueKey }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        parseResolveInfo,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n      },\n      { fieldWithHooks, scope: { isRootQuery } }\n    ) => {\n      if (!isRootQuery) {\n        return fields;\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.class\n          .filter(table => table.isSelectable)\n          .filter(table => table.namespace)\n          .reduce((memo, table) => {\n            const TableType = pgGetGqlTypeByTypeId(table.type.id);\n            const tableTypeName = TableType.name;\n            const ConnectionType = getTypeByName(\n              inflection.connection(TableType.name)\n            );\n            if (!TableType) {\n              throw new Error(\n                `Could not find GraphQL type for table '${table.name}'`\n              );\n            }\n            const attributes = introspectionResultsByKind.attribute.filter(\n              attr => attr.classId === table.id\n            );\n            const primaryKeyConstraint = introspectionResultsByKind.constraint\n              .filter(con => con.classId === table.id)\n              .filter(con => con.type === \"p\")[0];\n            const primaryKeys =\n              primaryKeyConstraint &&\n              primaryKeyConstraint.keyAttributeNums.map(\n                num => attributes.filter(attr => attr.num === num)[0]\n              );\n            const isView = t => t.classKind === \"v\";\n            const uniqueIdAttribute = viewUniqueKey\n              ? attributes.find(attr => attr.name === viewUniqueKey)\n              : undefined;\n            if (!ConnectionType) {\n              throw new Error(\n                `Could not find GraphQL connection type for table '${\n                  table.name\n                }'`\n              );\n            }\n            const schema = table.namespace;\n            const sqlFullTableName = sql.identifier(schema.name, table.name);\n            if (TableType && ConnectionType) {\n              const fieldName = inflection.allRows(table.name, schema.name);\n              memo[fieldName] = fieldWithHooks(\n                fieldName,\n                ({ getDataFromParsedResolveInfoFragment }) => {\n                  return {\n                    description: `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`,\n                    type: ConnectionType,\n                    args: {},\n                    async resolve(parent, args, { pgClient }, resolveInfo) {\n                      const parsedResolveInfoFragment = parseResolveInfo(\n                        resolveInfo\n                      );\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        resolveInfo.returnType\n                      );\n                      const query = queryFromResolveData(\n                        sqlFullTableName,\n                        undefined,\n                        resolveData,\n                        {\n                          withPaginationAsFields: true,\n                        },\n                        builder => {\n                          if (primaryKeys) {\n                            builder.beforeLock(\"orderBy\", () => {\n                              if (!builder.isOrderUnique(false)) {\n                                // Order by PK if no order specified\n                                builder.data.cursorPrefix = [\"primary_key_asc\"];\n                                primaryKeys.forEach(key => {\n                                  builder.orderBy(\n                                    sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                      key.name\n                                    )}`,\n                                    true\n                                  );\n                                });\n                                builder.setOrderIsUnique();\n                              }\n                            });\n                          } else if (isView(table) && !!uniqueIdAttribute) {\n                            builder.beforeLock(\"orderBy\", () => {\n                              if (!builder.isOrderUnique(false)) {\n                                builder.data.cursorPrefix = [\n                                  \"view_unique_key_asc\",\n                                ];\n                                builder.orderBy(\n                                  sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                    uniqueIdAttribute.name\n                                  )}`,\n                                  true\n                                );\n                                builder.setOrderIsUnique();\n                              }\n                            });\n                          }\n                        }\n                      );\n                      const { text, values } = sql.compile(query);\n                      if (debugSql.enabled) debugSql(text);\n                      const { rows: [row] } = await pgClient.query(\n                        text,\n                        values\n                      );\n                      return addStartEndCursor(row);\n                    },\n                  };\n                },\n                {\n                  isPgFieldConnection: true,\n                  pgFieldIntrospection: table,\n                }\n              );\n            }\n            return memo;\n          }, {}),\n        `Adding 'all*' relations to root Query`\n      );\n    }\n  );\n}: Plugin);\n"]}