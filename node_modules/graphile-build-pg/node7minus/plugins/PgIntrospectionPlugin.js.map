{"version":3,"sources":["../../src/plugins/PgIntrospectionPlugin.js"],"names":["debug","INTROSPECTION_PATH","__dirname","WATCH_FIXTURES_PATH","readFile","filename","encoding","resolve","reject","err","res","builder","Array","isArray","schemas","Error","cacheKey","cloneResults","result","obj","reduce","memo","k","map","v","persistentMemoizeWithKey","pgConfig","pgClient","introspectionQuery","query","rows","object","kind","push","namespace","class","attribute","type","constraint","procedure","forEach","pgEnableTags","description","parsed","tags","text","introspectionResultsByKind","knownSchemas","n","name","missingSchemas","filter","indexOf","s","length","errorMessage","join","pgThrowOnMissingSchema","console","warn","xByY","arrayOfX","attrKey","x","xByYAndZ","attrKey2","namespaceById","classById","typeById","attributeByClassIdAndNum","relate","array","newAttr","lookupAttr","lookup","missingOk","key","entry","introspect","pgSchemas","fn","stopListening","catch","e","removeListener","listener","releasePgClient","registerWatcher","triggerRebuild","Pool","connect","release","Client","on","end","watchSqlInner","sql","bold","yellow","handleChange","notification","channel","payload","JSON","parse","commands","schema","command","affectsOurSchemas","some","schemaName","hook","build","extend","pgIntrospectionResultsByKind","PgIntrospectionPlugin"],"mappings":"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","file":"PgIntrospectionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport withPgClient from \"../withPgClient\";\nimport { parseTags } from \"../utils\";\nimport { readFile as rawReadFile } from \"fs\";\nimport pg from \"pg\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\nimport { quacksLikePgPool } from \"../withPgClient\";\n\nimport { version } from \"../../package.json\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\nconst INTROSPECTION_PATH = `${__dirname}/../../res/introspection-query.sql`;\nconst WATCH_FIXTURES_PATH = `${__dirname}/../../res/watch-fixtures.sql`;\n\n// Ref: https://github.com/postgraphql/postgraphql/tree/master/src/postgres/introspection/object\n\nexport type Namespace = {\n  kind: \"namespace\",\n  id: string,\n  name: string,\n  description: string,\n};\n\nexport type Proc = {\n  kind: \"procedure\",\n  name: string,\n  description: ?string,\n  namespaceId: string,\n  isStrict: boolean,\n  returnsSet: boolean,\n  isStable: boolean,\n  returnTypeId: string,\n  argTypeIds: Array<string>,\n  argNames: Array<string>,\n  argDefaultsNum: number,\n  namespace: Namespace,\n};\n\nfunction readFile(filename, encoding) {\n  return new Promise((resolve, reject) => {\n    rawReadFile(filename, encoding, (err, res) => {\n      if (err) reject(err);\n      else resolve(res);\n    });\n  });\n}\n\nexport default (async function PgIntrospectionPlugin(\n  builder,\n  {\n    pgConfig,\n    pgSchemas: schemas,\n    pgEnableTags,\n    persistentMemoizeWithKey = (key, fn) => fn(),\n    pgThrowOnMissingSchema = false,\n  }\n) {\n  async function introspect() {\n    // Perform introspection\n    if (!Array.isArray(schemas)) {\n      throw new Error(\"Argument 'schemas' (array) is required\");\n    }\n    const cacheKey = `PgIntrospectionPlugin-introspectionResultsByKind-v${version}`;\n    const cloneResults = obj => {\n      const result = Object.keys(obj).reduce((memo, k) => {\n        memo[k] = obj[k].map(v => Object.assign({}, v));\n        return memo;\n      }, {});\n      return result;\n    };\n    const introspectionResultsByKind = cloneResults(\n      await persistentMemoizeWithKey(cacheKey, () =>\n        withPgClient(pgConfig, async pgClient => {\n          const introspectionQuery = await readFile(INTROSPECTION_PATH, \"utf8\");\n          const { rows } = await pgClient.query(introspectionQuery, [schemas]);\n\n          const result = rows.reduce(\n            (memo, { object }) => {\n              memo[object.kind].push(object);\n              return memo;\n            },\n            {\n              namespace: [],\n              class: [],\n              attribute: [],\n              type: [],\n              constraint: [],\n              procedure: [],\n            }\n          );\n\n          // Parse tags from comments\n          [\"namespace\", \"class\", \"attribute\", \"type\", \"procedure\"].forEach(\n            kind => {\n              result[kind].forEach(object => {\n                if (pgEnableTags && object.description) {\n                  const parsed = parseTags(object.description);\n                  object.tags = parsed.tags;\n                  object.description = parsed.text;\n                } else {\n                  object.tags = {};\n                }\n              });\n            }\n          );\n\n          for (const k in result) {\n            result[k].map(Object.freeze);\n          }\n          return Object.freeze(result);\n        })\n      )\n    );\n\n    const knownSchemas = introspectionResultsByKind.namespace.map(n => n.name);\n    const missingSchemas = schemas.filter(s => knownSchemas.indexOf(s) < 0);\n    if (missingSchemas.length) {\n      const errorMessage = `You requested to use schema '${schemas.join(\n        \"', '\"\n      )}'; however we couldn't find some of those! Missing schemas are: '${missingSchemas.join(\n        \"', '\"\n      )}'`;\n      if (pgThrowOnMissingSchema) {\n        throw new Error(errorMessage);\n      } else {\n        console.warn(\"⚠️ WARNING⚠️  \" + errorMessage); // eslint-disable-line no-console\n      }\n    }\n\n    const xByY = (arrayOfX, attrKey) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = x;\n        return memo;\n      }, {});\n    const xByYAndZ = (arrayOfX, attrKey, attrKey2) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = memo[x[attrKey]] || {};\n        memo[x[attrKey]][x[attrKey2]] = x;\n        return memo;\n      }, {});\n    introspectionResultsByKind.namespaceById = xByY(\n      introspectionResultsByKind.namespace,\n      \"id\"\n    );\n    introspectionResultsByKind.classById = xByY(\n      introspectionResultsByKind.class,\n      \"id\"\n    );\n    introspectionResultsByKind.typeById = xByY(\n      introspectionResultsByKind.type,\n      \"id\"\n    );\n    introspectionResultsByKind.attributeByClassIdAndNum = xByYAndZ(\n      introspectionResultsByKind.attribute,\n      \"classId\",\n      \"num\"\n    );\n\n    const relate = (array, newAttr, lookupAttr, lookup, missingOk = false) => {\n      array.forEach(entry => {\n        const key = entry[lookupAttr];\n        const result = lookup[key];\n        if (key && !result) {\n          if (missingOk) {\n            return;\n          }\n          throw new Error(\n            `Could not look up '${newAttr}' by '${lookupAttr}' on '${JSON.stringify(\n              entry\n            )}'`\n          );\n        }\n        entry[newAttr] = result;\n      });\n    };\n\n    relate(\n      introspectionResultsByKind.class,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because it could be a type defined in a different namespace - which is fine so long as we don't allow querying it directly\n    );\n\n    relate(\n      introspectionResultsByKind.class,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.procedure,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById,\n      true\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"domainBaseType\",\n      \"domainBaseTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are domains\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"arrayItemType\",\n      \"arrayItemTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are arrays\n    );\n\n    return introspectionResultsByKind;\n  }\n\n  let introspectionResultsByKind = await introspect();\n\n  let pgClient, releasePgClient, listener;\n\n  function stopListening() {\n    if (pgClient) {\n      pgClient.query(\"unlisten postgraphql_watch\").catch(e => {\n        debug(`Error occurred trying to unlisten watch: ${e}`);\n      });\n      pgClient.removeListener(\"notification\", listener);\n    }\n    if (releasePgClient) {\n      releasePgClient();\n      pgClient = null;\n    }\n  }\n\n  builder.registerWatcher(async triggerRebuild => {\n    // In case we started listening before, clean up\n    await stopListening();\n\n    // Check we can get a pgClient\n    if (pgConfig instanceof pg.Pool || quacksLikePgPool(pgConfig)) {\n      pgClient = await pgConfig.connect();\n      releasePgClient = () => pgClient && pgClient.release();\n    } else if (typeof pgConfig === \"string\") {\n      pgClient = new pg.Client(pgConfig);\n      pgClient.on(\"error\", e => {\n        debug(\"pgClient error occurred: %s\", e);\n      });\n      releasePgClient = () =>\n        new Promise((resolve, reject) => {\n          if (pgClient) pgClient.end(err => (err ? reject(err) : resolve()));\n          else resolve();\n        });\n      await new Promise((resolve, reject) => {\n        if (pgClient) {\n          pgClient.connect(err => (err ? reject(err) : resolve()));\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      throw new Error(\n        \"Cannot watch schema with this configuration - need a string or pg.Pool\"\n      );\n    }\n    // Install the watch fixtures.\n    const watchSqlInner = await readFile(WATCH_FIXTURES_PATH, \"utf8\");\n    const sql = `begin; ${watchSqlInner}; commit;`;\n    try {\n      await pgClient.query(sql);\n    } catch (error) {\n      /* eslint-disable no-console */\n      console.warn(\n        `${chalk.bold.yellow(\n          \"Failed to setup watch fixtures in Postgres database\"\n        )} ️️⚠️`\n      );\n      console.warn(\n        chalk.yellow(\n          \"This is likely because your Postgres user is not a superuser. If the\"\n        )\n      );\n      console.warn(\n        chalk.yellow(\n          \"fixtures already exist, the watch functionality may still work.\"\n        )\n      );\n      console.warn(\n        chalk.yellow(\"Enable DEBUG='graphile-build-pg' to see the error\")\n      );\n      debug(error);\n      /* eslint-enable no-console */\n      await pgClient.query(\"rollback\");\n    }\n\n    await pgClient.query(\"listen postgraphql_watch\");\n\n    const handleChange = async () => {\n      debug(`Schema change detected: re-inspecting schema...`);\n      introspectionResultsByKind = await introspect();\n      debug(`Schema change detected: re-inspecting schema complete`);\n      triggerRebuild();\n    };\n\n    listener = async notification => {\n      if (notification.channel !== \"postgraphql_watch\") {\n        return;\n      }\n      try {\n        const payload = JSON.parse(notification.payload);\n        payload.payload = payload.payload || [];\n        if (payload.type === \"ddl\") {\n          const commands = payload.payload\n            .filter(\n              ({ schema }) => schema == null || schemas.indexOf(schema) >= 0\n            )\n            .map(({ command }) => command);\n          if (commands.length) {\n            handleChange();\n          }\n        } else if (payload.type === \"drop\") {\n          const affectsOurSchemas = payload.payload.some(\n            schemaName => schemas.indexOf(schemaName) >= 0\n          );\n          if (affectsOurSchemas) {\n            handleChange();\n          }\n        } else {\n          throw new Error(`Payload type '${payload.type}' not recognised`);\n        }\n      } catch (e) {\n        debug(`Error occurred parsing notification payload: ${e}`);\n      }\n    };\n    pgClient.on(\"notification\", listener);\n    introspectionResultsByKind = await introspect();\n  }, stopListening);\n\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n    });\n  });\n}: Plugin);\n"]}