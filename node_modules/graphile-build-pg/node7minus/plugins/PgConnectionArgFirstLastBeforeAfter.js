"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});


var base64Decode = function base64Decode(str) {
  return new Buffer(String(str), "base64").toString("utf8");
};

exports.default = function PgConnectionArgs(builder) {
  builder.hook("GraphQLObjectType:fields:field:args", function (args, _ref, _ref2) {
    var extend = _ref.extend,
        getTypeByName = _ref.getTypeByName,
        GraphQLInt = _ref.graphql.GraphQLInt;
    var _ref2$scope = _ref2.scope,
        isPgFieldConnection = _ref2$scope.isPgFieldConnection,
        source = _ref2$scope.pgFieldIntrospection,
        addArgDataGenerator = _ref2.addArgDataGenerator,
        field = _ref2.field,
        Self = _ref2.Self;

    if (!isPgFieldConnection || !source || source.kind !== "class" && source.kind !== "procedure") {
      return args;
    }
    var Cursor = getTypeByName("Cursor");

    addArgDataGenerator(function connectionFirstLastBeforeAfter(_ref3) {
      var first = _ref3.first,
          offset = _ref3.offset,
          last = _ref3.last,
          after = _ref3.after,
          before = _ref3.before;

      return {
        pgQuery: function pgQuery(queryBuilder) {
          if (after != null) {
            addCursorConstraint(after, true);
          }
          if (before != null) {
            addCursorConstraint(before, false);
          }
          if (first != null) {
            queryBuilder.first(first);
          }
          if (offset != null) {
            queryBuilder.offset(offset);
          }
          if (last != null) {
            if (first != null) {
              throw new Error("We don't support setting both first and last");
            }
            if (offset != null) {
              throw new Error("We don't support setting both offset and last");
            }
            queryBuilder.last(last);
          }

          function addCursorConstraint(cursor, isAfter) {
            var cursorValues = JSON.parse(base64Decode(cursor));
            return queryBuilder.addCursorCondition(cursorValues, isAfter);
          }
        }
      };
    });

    return extend(args, {
      first: {
        description: "Only read the first `n` values of the set.",
        type: GraphQLInt
      },
      last: {
        description: "Only read the last `n` values of the set.",
        type: GraphQLInt
      },
      offset: {
        description: "Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.",
        type: GraphQLInt
      },
      before: {
        description: "Read all values in the set before (above) this cursor.",
        type: Cursor
      },
      after: {
        description: "Read all values in the set after (below) this cursor.",
        type: Cursor
      }
    }, `Adding connection pagination args to field '${field.name}' of '${Self.name}'`);
  });
};
//# sourceMappingURL=PgConnectionArgFirstLastBeforeAfter.js.map