{"version":3,"sources":["../src/inflections.js"],"names":["defaultUtils","constantCase","camelCase","upperCamelCase","pluralize","singularize","singular","newInflector","overrides","undefined","singularizeTable","tableName","replace","argument","name","index","orderByType","typeName","orderByEnum","ascending","_table","_schema","domainType","enumName","value","valueWithAsterisksReplaced","enumType","conditionType","inputType","rangeBoundType","rangeType","patchType","patchField","itemName","tableNode","allRows","schema","functionName","functionPayloadType","functionInputType","tableType","column","singleRelationByKeys","detailedKeys","table","map","key","join","rowByUniqueKeys","updateByKeys","deleteByKeys","updateNode","deleteNode","updateByKeysInputType","deleteByKeysInputType","updateNodeInputType","deleteNodeInputType","manyRelationByKeys","_foreignTable","_foreignSchema","edge","edgeField","connection","scalarFunctionConnection","procName","_procSchema","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType","defaultInflection"],"mappings":"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","file":"inflections.js","sourcesContent":["// @flow\nimport pluralize from \"pluralize\";\nimport { upperCamelCase, camelCase, constantCase } from \"./utils\";\n\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\ntype InflectorUtils = {|\n  constantCase: string => string,\n  camelCase: string => string,\n  upperCamelCase: string => string,\n  pluralize: string => string,\n  singularize: string => string,\n|};\n\nexport const defaultUtils: InflectorUtils = {\n  constantCase,\n  camelCase,\n  upperCamelCase,\n  pluralize,\n  singularize: pluralize.singular,\n};\n\nexport type Inflector = {\n  // TODO: tighten this up!\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n};\n\nexport const newInflector = (\n  overrides: ?{ [string]: () => string } = undefined,\n  {\n    constantCase,\n    camelCase,\n    upperCamelCase,\n    pluralize,\n    singularize,\n  }: InflectorUtils = defaultUtils\n): Inflector => {\n  function singularizeTable(tableName: string): string {\n    return singularize(tableName).replace(\n      /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n      \"$&_record\"\n    );\n  }\n\n  return Object.assign(\n    {\n      pluralize,\n      argument(name: ?string, index: number) {\n        return camelCase(name || `arg${index}`);\n      },\n      orderByType(typeName: string) {\n        return upperCamelCase(`${pluralize(typeName)}-order-by`);\n      },\n      orderByEnum(\n        name: string,\n        ascending: boolean,\n        _table: string,\n        _schema: ?string\n      ) {\n        return constantCase(`${name}_${ascending ? \"asc\" : \"desc\"}`);\n      },\n      domainType(name: string) {\n        return upperCamelCase(name);\n      },\n      enumName(value: string) {\n        if (value === \"\") {\n          return \"_EMPTY_\";\n        }\n        const valueWithAsterisksReplaced = value\n          .replace(/\\*/g, \"_ASTERISK_\")\n          .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n          .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n        return valueWithAsterisksReplaced;\n      },\n      enumType(name: string) {\n        return upperCamelCase(name);\n      },\n      conditionType(typeName: string) {\n        return upperCamelCase(`${typeName}-condition`);\n      },\n      inputType(typeName: string) {\n        return upperCamelCase(`${typeName}-input`);\n      },\n      rangeBoundType(typeName: string) {\n        return upperCamelCase(`${typeName}-range-bound`);\n      },\n      rangeType(typeName: string) {\n        return upperCamelCase(`${typeName}-range`);\n      },\n      patchType(typeName: string) {\n        return upperCamelCase(`${typeName}-patch`);\n      },\n      patchField(itemName: string) {\n        return camelCase(`${itemName}-patch`);\n      },\n      tableName(name: string, _schema: ?string) {\n        return camelCase(singularizeTable(name));\n      },\n      tableNode(name: string, _schema: ?string) {\n        return camelCase(singularizeTable(name));\n      },\n      allRows(name: string, schema: ?string) {\n        return camelCase(`all-${this.pluralize(this.tableName(name, schema))}`);\n      },\n      functionName(name: string, _schema: ?string) {\n        return camelCase(name);\n      },\n      functionPayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`${name}-payload`);\n      },\n      functionInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`${name}-input`);\n      },\n      tableType(name: string, schema: ?string) {\n        return upperCamelCase(this.tableName(name, schema));\n      },\n      column(name: string, _table: string, _schema: ?string) {\n        return camelCase(name);\n      },\n      singleRelationByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      rowByUniqueKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      updateByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `update-${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      deleteByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `delete-${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      updateNode(name: string, _schema: ?string) {\n        return camelCase(`update-${singularizeTable(name)}`);\n      },\n      deleteNode(name: string, _schema: ?string) {\n        return camelCase(`delete-${singularizeTable(name)}`);\n      },\n      updateByKeysInputType(\n        detailedKeys: Keys,\n        name: string,\n        _schema: ?string\n      ) {\n        return upperCamelCase(\n          `update-${singularizeTable(name)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}-input`\n        );\n      },\n      deleteByKeysInputType(\n        detailedKeys: Keys,\n        name: string,\n        _schema: ?string\n      ) {\n        return upperCamelCase(\n          `delete-${singularizeTable(name)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}-input`\n        );\n      },\n      updateNodeInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`update-${singularizeTable(name)}-input`);\n      },\n      deleteNodeInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`delete-${singularizeTable(name)}-input`);\n      },\n      manyRelationByKeys(\n        detailedKeys: Keys,\n        table: string,\n        schema: ?string,\n        _foreignTable: string,\n        _foreignSchema: ?string\n      ) {\n        return camelCase(\n          `${this.pluralize(\n            this.tableName(table, schema)\n          )}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      edge(typeName: string) {\n        return upperCamelCase(`${pluralize(typeName)}-edge`);\n      },\n      edgeField(name: string, _schema: ?string) {\n        return camelCase(`${singularizeTable(name)}-edge`);\n      },\n      connection(typeName: string) {\n        return upperCamelCase(`${this.pluralize(typeName)}-connection`);\n      },\n      scalarFunctionConnection(procName: string, _procSchema: ?string) {\n        return upperCamelCase(`${procName}-connection`);\n      },\n      scalarFunctionEdge(procName: string, _procSchema: ?string) {\n        return upperCamelCase(`${procName}-edge`);\n      },\n      createField(name: string, _schema: ?string) {\n        return camelCase(`create-${singularizeTable(name)}`);\n      },\n      createInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`create-${singularizeTable(name)}-input`);\n      },\n      createPayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`create-${singularizeTable(name)}-payload`);\n      },\n      updatePayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`update-${singularizeTable(name)}-payload`);\n      },\n      deletePayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`delete-${singularizeTable(name)}-payload`);\n      },\n    },\n    overrides\n  );\n};\n\nexport const defaultInflection = newInflector();\n"]}