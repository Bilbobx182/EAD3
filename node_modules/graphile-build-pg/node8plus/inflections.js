"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultInflection = exports.newInflector = exports.defaultUtils = undefined;

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _pluralize = require("pluralize");

var _pluralize2 = _interopRequireDefault(_pluralize);

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultUtils = exports.defaultUtils = {
  constantCase: _utils.constantCase,
  camelCase: _utils.camelCase,
  upperCamelCase: _utils.upperCamelCase,
  pluralize: _pluralize2.default,
  singularize: _pluralize2.default.singular
};

const newInflector = exports.newInflector = (overrides = undefined, {
  constantCase,
  camelCase,
  upperCamelCase,
  pluralize,
  singularize
} = defaultUtils) => {
  function singularizeTable(tableName) {
    return singularize(tableName).replace(/.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/, "$&_record");
  }

  return (0, _assign2.default)({
    pluralize,
    argument(name, index) {
      return camelCase(name || `arg${index}`);
    },
    orderByType(typeName) {
      return upperCamelCase(`${pluralize(typeName)}-order-by`);
    },
    orderByEnum(name, ascending, _table, _schema) {
      return constantCase(`${name}_${ascending ? "asc" : "desc"}`);
    },
    domainType(name) {
      return upperCamelCase(name);
    },
    enumName(value) {
      if (value === "") {
        return "_EMPTY_";
      }
      const valueWithAsterisksReplaced = value.replace(/\*/g, "_ASTERISK_").replace(/^(_?)_+ASTERISK/, "$1ASTERISK").replace(/ASTERISK_(_?)_*$/, "ASTERISK$1");
      return valueWithAsterisksReplaced;
    },
    enumType(name) {
      return upperCamelCase(name);
    },
    conditionType(typeName) {
      return upperCamelCase(`${typeName}-condition`);
    },
    inputType(typeName) {
      return upperCamelCase(`${typeName}-input`);
    },
    rangeBoundType(typeName) {
      return upperCamelCase(`${typeName}-range-bound`);
    },
    rangeType(typeName) {
      return upperCamelCase(`${typeName}-range`);
    },
    patchType(typeName) {
      return upperCamelCase(`${typeName}-patch`);
    },
    patchField(itemName) {
      return camelCase(`${itemName}-patch`);
    },
    tableName(name, _schema) {
      return camelCase(singularizeTable(name));
    },
    tableNode(name, _schema) {
      return camelCase(singularizeTable(name));
    },
    allRows(name, schema) {
      return camelCase(`all-${this.pluralize(this.tableName(name, schema))}`);
    },
    functionName(name, _schema) {
      return camelCase(name);
    },
    functionPayloadType(name, _schema) {
      return upperCamelCase(`${name}-payload`);
    },
    functionInputType(name, _schema) {
      return upperCamelCase(`${name}-input`);
    },
    tableType(name, schema) {
      return upperCamelCase(this.tableName(name, schema));
    },
    column(name, _table, _schema) {
      return camelCase(name);
    },
    singleRelationByKeys(detailedKeys, table, schema) {
      return camelCase(`${this.tableName(table, schema)}-by-${detailedKeys.map(key => this.column(key.column, key.table, key.schema)).join("-and-")}`);
    },
    rowByUniqueKeys(detailedKeys, table, schema) {
      return camelCase(`${this.tableName(table, schema)}-by-${detailedKeys.map(key => this.column(key.column, key.table, key.schema)).join("-and-")}`);
    },
    updateByKeys(detailedKeys, table, schema) {
      return camelCase(`update-${this.tableName(table, schema)}-by-${detailedKeys.map(key => this.column(key.column, key.table, key.schema)).join("-and-")}`);
    },
    deleteByKeys(detailedKeys, table, schema) {
      return camelCase(`delete-${this.tableName(table, schema)}-by-${detailedKeys.map(key => this.column(key.column, key.table, key.schema)).join("-and-")}`);
    },
    updateNode(name, _schema) {
      return camelCase(`update-${singularizeTable(name)}`);
    },
    deleteNode(name, _schema) {
      return camelCase(`delete-${singularizeTable(name)}`);
    },
    updateByKeysInputType(detailedKeys, name, _schema) {
      return upperCamelCase(`update-${singularizeTable(name)}-by-${detailedKeys.map(key => this.column(key.column, key.table, key.schema)).join("-and-")}-input`);
    },
    deleteByKeysInputType(detailedKeys, name, _schema) {
      return upperCamelCase(`delete-${singularizeTable(name)}-by-${detailedKeys.map(key => this.column(key.column, key.table, key.schema)).join("-and-")}-input`);
    },
    updateNodeInputType(name, _schema) {
      return upperCamelCase(`update-${singularizeTable(name)}-input`);
    },
    deleteNodeInputType(name, _schema) {
      return upperCamelCase(`delete-${singularizeTable(name)}-input`);
    },
    manyRelationByKeys(detailedKeys, table, schema, _foreignTable, _foreignSchema) {
      return camelCase(`${this.pluralize(this.tableName(table, schema))}-by-${detailedKeys.map(key => this.column(key.column, key.table, key.schema)).join("-and-")}`);
    },
    edge(typeName) {
      return upperCamelCase(`${pluralize(typeName)}-edge`);
    },
    edgeField(name, _schema) {
      return camelCase(`${singularizeTable(name)}-edge`);
    },
    connection(typeName) {
      return upperCamelCase(`${this.pluralize(typeName)}-connection`);
    },
    scalarFunctionConnection(procName, _procSchema) {
      return upperCamelCase(`${procName}-connection`);
    },
    scalarFunctionEdge(procName, _procSchema) {
      return upperCamelCase(`${procName}-edge`);
    },
    createField(name, _schema) {
      return camelCase(`create-${singularizeTable(name)}`);
    },
    createInputType(name, _schema) {
      return upperCamelCase(`create-${singularizeTable(name)}-input`);
    },
    createPayloadType(name, _schema) {
      return upperCamelCase(`create-${singularizeTable(name)}-payload`);
    },
    updatePayloadType(name, _schema) {
      return upperCamelCase(`update-${singularizeTable(name)}-payload`);
    },
    deletePayloadType(name, _schema) {
      return upperCamelCase(`delete-${singularizeTable(name)}-payload`);
    }
  }, overrides);
};

const defaultInflection = exports.defaultInflection = newInflector();
//# sourceMappingURL=inflections.js.map