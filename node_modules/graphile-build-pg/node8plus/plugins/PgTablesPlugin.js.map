{"version":3,"sources":["../../src/plugins/PgTablesPlugin.js"],"names":["base64","str","Buffer","String","toString","PgTablesPlugin","builder","pgInflection","inflection","hook","_","build","getNodeIdForTypeAndIdentifiers","nodeIdFieldName","newWithHooks","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","getTypeByName","pgGetGqlTypeByTypeId","pgGetGqlInputTypeByTypeId","pgRegisterGqlTypeByTypeId","pgRegisterGqlInputTypeByTypeId","pg2GqlMapper","gql2pg","graphql","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","GraphQLInputObjectType","pgColumnFilter","Cursor","class","forEach","table","tablePgType","type","find","category","namespaceId","classId","id","Error","arrayTablePgType","arrayItemTypeId","primaryKeyConstraint","constraint","filter","con","primaryKeys","keyAttributeNums","map","num","attributeByClassIdAndNum","attributes","attribute","attr","sort","a1","a2","tableTypeName","tableType","name","namespaceName","shouldHaveNodeId","isSelectable","namespace","length","cb","TableType","description","interfaces","fields","addDataGeneratorForField","Self","pgQuery","queryBuilder","select","fragment","join","key","getTableAlias","identifier","resolve","data","__identifiers","pgIntrospection","isPgRowType","isPgCompoundType","pgInputFields","inputType","context","unmap","obj","null","fieldName","column","pgInputField","v","isInputType","pgAddSubfield","attrName","pgType","spec","patchType","isPgPatch","_attrName","_type","EdgeType","edge","fieldWithHooks","recurseDataGeneratorsForField","cursor","addDataGenerator","usesCursor","__cursor","isCursorField","node","isEdgeType","isPgRowEdgeType","nodeType","PageInfo","connection","nodes","edges","pageInfo","isConnectionType","isPgRowConnectionType","edgeType","TableInputType"],"mappings":";;;;;;;;;;;;AAEA,MAAMA,SAASC,OAAO,IAAIC,MAAJ,CAAWC,OAAOF,GAAP,CAAX,EAAwBG,QAAxB,CAAiC,QAAjC,CAAtB;;kBAEgB,SAASC,cAAT,CAAwBC,OAAxB,EAAiC,EAAEC,cAAcC,UAAhB,EAAjC,EAA+D;AAC7EF,UAAQG,IAAR,CAAa,MAAb,EAAqB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACjC,UAAM;AACJC,oCADI;AAEJC,qBAFI;AAGJC,kBAHI;AAIJC,aAAOC,GAJH;AAKJC,oCAA8BC,0BAL1B;AAMJC,mBANI;AAOJC,0BAPI;AAQJC,+BARI;AASJC,+BATI;AAUJC,oCAVI;AAWJC,kBAXI;AAYJC,YAZI;AAaJC,eAAS;AACPC,yBADO;AAEPC,sBAFO;AAGPC,iBAHO;AAIPC,mBAJO;AAKPC;AALO,OAbL;AAoBJC;AApBI,QAqBFrB,KArBJ;AAsBA,UAAMsB,SAASd,cAAc,QAAd,CAAf;AACAD,+BAA2BgB,KAA3B,CAAiCC,OAAjC,CAAyCC,SAAS;AAChD,YAAMC,cAAcnB,2BAA2BoB,IAA3B,CAAgCC,IAAhC,CAClBD,QACEA,KAAKA,IAAL,KAAc,GAAd,IACAA,KAAKE,QAAL,KAAkB,GADlB,IAEAF,KAAKG,WAAL,KAAqBL,MAAMK,WAF3B,IAGAH,KAAKI,OAAL,KAAiBN,MAAMO,EALP,CAApB;AAOA,UAAI,CAACN,WAAL,EAAkB;AAChB,cAAM,IAAIO,KAAJ,CAAU,6CAAV,CAAN;AACD;AACD,YAAMC,mBAAmB3B,2BAA2BoB,IAA3B,CAAgCC,IAAhC,CACvBD,QAAQA,KAAKQ,eAAL,KAAyBT,YAAYM,EADtB,CAAzB;AAGA;;;;;;;;;;;;;AAaA,YAAMI,uBAAuB7B,2BAA2B8B,UAA3B,CAC1BC,MAD0B,CACnBC,OAAOA,IAAIR,OAAJ,KAAgBN,MAAMO,EADV,EAE1BM,MAF0B,CAEnBC,OAAOA,IAAIZ,IAAJ,KAAa,GAFD,EAEM,CAFN,CAA7B;AAGA,YAAMa,cACJJ,wBACAA,qBAAqBK,gBAArB,CAAsCC,GAAtC,CACEC,OACEpC,2BAA2BqC,wBAA3B,CAAoDnB,MAAMO,EAA1D,EAA8DW,GAA9D,CAFJ,CAFF;AAMA,YAAME,aAAatC,2BAA2BuC,SAA3B,CAChBR,MADgB,CACTS,QAAQA,KAAKhB,OAAL,KAAiBN,MAAMO,EADtB,EAEhBgB,IAFgB,CAEX,CAACC,EAAD,EAAKC,EAAL,KAAYD,GAAGN,GAAH,GAASO,GAAGP,GAFb,CAAnB;AAGA,YAAMQ,gBAAgBtD,WAAWuD,SAAX,CACpB3B,MAAM4B,IADc,EAEpB5B,MAAM6B,aAFc,CAAtB;AAIA,YAAMC,mBACJrD,mBACAuB,MAAM+B,YADN,IAEA/B,MAAMgC,SAFN,IAGAjB,WAHA,IAIAA,YAAYkB,MAJZ,GAKI,IALJ,GAMI,KAPN;AAQA/C,gCACEe,YAAYM,EADd,EAEE2B,MAAM;AACJ,YAAI9C,aAAaa,YAAYM,EAAzB,CAAJ,EAAkC;AAChC;AACA,gBAAM,IAAIC,KAAJ,CACH,kEACCP,YAAYM,EACb,IAHG,CAAN;AAKD;AACD,cAAM4B,YAAYzD,aAChBa,iBADgB,EAEhB;AACE6C,uBAAapC,MAAMoC,WAAN,IAAqBnC,YAAYmC,WADhD;AAEER,gBAAMF,aAFR;AAGEW,sBAAY,MAAM;AAChB,gBAAIP,gBAAJ,EAAsB;AACpB,qBAAO,CAAC/C,cAAc,MAAd,CAAD,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,EAAP;AACD;AACF,WATH;AAUEuD,kBAAQ,CAAC,EAAEC,wBAAF,EAA4BC,IAA5B,EAAD,KAAwC;AAC9C,kBAAMF,SAAS,EAAf;AACA,gBAAIR,gBAAJ,EAAsB;AACpB;AACAS,uCAAyB9D,eAAzB,EAA0C,MAAM;AAC9C,uBAAO;AACLgE,2BAASC,gBAAgB;AACvBA,iCAAaC,MAAb,CACE/D,IAAIgE,QAAS,oBAAmBhE,IAAIiE,IAAJ,CAC9B9B,YAAYE,GAAZ,CACE6B,OACElE,IAAIgE,QAAS,GAAEF,aAAaK,aAAb,EAA6B,IAAGnE,IAAIoE,UAAJ,CAC7CF,IAAIlB,IADyC,CAE7C,EAJN,CAD8B,EAO9B,IAP8B,CAQ9B,GATJ,EAUE,eAVF;AAYD;AAdI,iBAAP;AAgBD,eAjBD;AAkBAU,qBAAO7D,eAAP,IAA0B;AACxB2D,6BACE,kHAFsB;AAGxBlC,sBAAM,IAAIV,cAAJ,CAAmBC,SAAnB,CAHkB;AAIxBwD,wBAAQC,IAAR,EAAc;AACZ,yBACEA,KAAKC,aAAL,IACA3E,+BACEgE,IADF,EAEE,GAAGU,KAAKC,aAFV,CAFF;AAOD;AAZuB,eAA1B;AAcD;AACD,mBAAOb,MAAP;AACD;AAhDH,SAFgB,EAoDhB;AACEc,2BAAiBpD,KADnB;AAEEqD,uBAAarD,MAAM+B,YAFrB;AAGEuB,4BAAkB,CAACtD,MAAM+B;AAH3B,SApDgB,CAAlB;AA0DAG,WAAGC,SAAH;AACA,cAAMoB,gBAAgB,EAAtB;AACA7E,qBACEiB,sBADF,EAEE;AACEyC,uBAAc,sCAAqCV,aAAc,IADnE;AAEEE,gBAAMxD,WAAWoF,SAAX,CAAqBrB,SAArB,CAFR;AAGEG,kBAAQmB,WAAW;AACjBrE,yBAAaa,YAAYM,EAAzB,IAA+B;AAC7BU,mBAAK3C,KAAKA,CADmB;AAE7BoF,qBAAOC,OAAO;AACZ,uBAAO/E,IAAIgE,QAAS,OAAMhE,IAAIiE,IAAJ,CACxBzB,WAAWH,GAAX,CAAeK,QAAQ;AACrB,sBAAI,CAAC1B,eAAe0B,IAAf,EAAqB/C,KAArB,EAA4BkF,OAA5B,CAAL,EAA2C;AACzC,2BAAO7E,IAAIgF,IAAX,CADyC,CACxB;AAClB;AACD,wBAAMC,YAAYzF,WAAW0F,MAAX,CAChBxC,KAAKM,IADW,EAEhB5B,MAAM4B,IAFU,EAGhB5B,MAAM6B,aAHU,CAAlB;AAKA,wBAAMkC,eAAeR,cAAcM,SAAd,CAArB;AACA,wBAAMG,IAAIL,IAAIE,SAAJ,CAAV;AACA,sBAAIE,gBAAgBC,KAAK,IAAzB,EAA+B;AAC7B,0BAAM,EAAE9D,IAAF,KAAW6D,YAAjB;AACA,2BAAOnF,IAAIgE,QAAS,GAAEvD,OACpB2E,CADoB,EAEpB9D,IAFoB,CAGpB,KAAItB,IAAIoE,UAAJ,CAAe9C,KAAK2B,aAApB,EAAmC3B,KAAK0B,IAAxC,CAA8C,EAHpD;AAID,mBAND,MAMO;AACL,2BAAOhD,IAAIgF,IAAX,CADK,CACY;AAClB;AACF,iBApBD,CADwB,EAsBxB,GAtBwB,CAuBxB,MAAKhF,IAAIoE,UAAJ,CACL/C,YAAY4B,aADP,EAEL5B,YAAY2B,IAFP,CAGL,EA1BF;AA2BD;AA9B4B,aAA/B;AAgCA,mBAAO,EAAP;AACD;AArCH,SAFF,EAyCE;AACEwB,2BAAiBpD,KADnB;AAEEiE,uBAAa,IAFf;AAGEZ,uBAAarD,MAAM+B,YAHrB;AAIEuB,4BAAkB,CAACtD,MAAM+B,YAJ3B;AAKEmC,wBAAcL,SAAd,EAAyBM,QAAzB,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAiD;AAC/Cd,0BAAcM,SAAd,IAA2B;AACzBjC,oBAAMuC,QADmB;AAEzBjE,oBAAMkE;AAFmB,aAA3B;AAIA,mBAAOC,IAAP;AACD;AAXH,SAzCF;;AAwDA,YAAIrE,MAAM+B,YAAV,EAAwB;AACtB;AACArD,uBACEiB,sBADF,EAEE;AACEyC,yBAAc,+BAA8BV,aAAc,0CAD5D;AAEEE,kBAAMxD,WAAWkG,SAAX,CAAqBnC,SAArB;AAFR,WAFF,EAME;AACEiB,6BAAiBpD,KADnB;AAEEqD,yBAAarD,MAAM+B,YAFrB;AAGEuB,8BAAkB,CAACtD,MAAM+B,YAH3B;AAIEwC,uBAAW,IAJb;AAKEL,0BAAcL,SAAd,EAAyBW,SAAzB,EAAoCC,KAApC,EAA2CJ,IAA3C,EAAiD;AAC/C;AACA,qBAAOA,IAAP;AACD;AARH,WANF;AAiBD;AACD,cAAMK,WAAWhG,aACfa,iBADe,EAEf;AACE6C,uBAAc,OAAMV,aAAc,4BADpC;AAEEE,gBAAMxD,WAAWuG,IAAX,CAAgBxC,UAAUP,IAA1B,CAFR;AAGEU,kBAAQ,CAAC,EAAEsC,cAAF,EAAkBC,6BAAlB,EAAD,KAAuD;AAC7DA,0CAA8B,MAA9B;AACA,mBAAO;AACLC,sBAAQF,eACN,QADM,EAEN,CAAC,EAAEG,gBAAF,EAAD,KAA0B;AACxBA,iCAAiB,OAAO;AACtBC,8BAAY,CAAC,IAAD;AADU,iBAAP,CAAjB;AAGA,uBAAO;AACL5C,+BAAa,iCADR;AAELlC,wBAAML,MAFD;AAGLoD,0BAAQC,IAAR,EAAc;AACZ,2BACEA,KAAK+B,QAAL,IACArH,OAAO,yBAAesF,KAAK+B,QAApB,CAAP,CAFF;AAID;AARI,iBAAP;AAUD,eAhBK,EAiBN;AACEC,+BAAe;AADjB,eAjBM,CADH;AAsBLC,oBAAM;AACJ/C,6BAAc,SAAQV,aAAc,4BADhC;AAEJxB,sBAAM,IAAIV,cAAJ,CAAmB2C,SAAnB,CAFF;AAGJc,wBAAQC,IAAR,EAAc;AACZ,yBAAOA,IAAP;AACD;AALG;AAtBD,aAAP;AA8BD;AAnCH,SAFe,EAuCf;AACEkC,sBAAY,IADd;AAEEC,2BAAiB,IAFnB;AAGEC,oBAAUnD,SAHZ;AAIEiB,2BAAiBpD;AAJnB,SAvCe,CAAjB;AA8CA,cAAMuF,WAAWxG,cAAc,UAAd,CAAjB;AACA;AACAL,qBACEa,iBADF,EAEE;AACE6C,uBAAc,+BAA8BV,aAAc,YAD5D;AAEEE,gBAAMxD,WAAWoH,UAAX,CAAsBrD,UAAUP,IAAhC,CAFR;AAGEU,kBAAQ,CAAC,EAAEuC,6BAAF,EAAD,KAAuC;AAC7CA,0CAA8B,OAA9B;AACAA,0CAA8B,OAA9B;AACAA,0CAA8B,UAA9B;AACA,mBAAO;AACLY,qBAAO;AACLrD,6BAAc,eAAcV,aAAc,aADrC;AAELxB,sBAAM,IAAIV,cAAJ,CAAmB,IAAIE,WAAJ,CAAgByC,SAAhB,CAAnB,CAFD;AAGLc,wBAAQC,IAAR,EAAc;AACZ,yBAAOA,KAAKA,IAAZ;AACD;AALI,eADF;AAQLwC,qBAAO;AACLtD,6BAAc,wCAAuCV,aAAc,qCAD9D;AAELxB,sBAAM,IAAIV,cAAJ,CACJ,IAAIE,WAAJ,CAAgB,IAAIF,cAAJ,CAAmBkF,QAAnB,CAAhB,CADI,CAFD;AAKLzB,wBAAQC,IAAR,EAAc;AACZ,yBAAOA,KAAKA,IAAZ;AACD;AAPI,eARF;AAiBLyC,wBAAUJ,YAAY;AACpBnD,6BAAa,mCADO;AAEpBlC,sBAAM,IAAIV,cAAJ,CAAmB+F,QAAnB,CAFc;AAGpBtC,wBAAQC,IAAR,EAAc;AACZ,yBAAOA,IAAP;AACD;AALmB;AAjBjB,aAAP;AAyBD;AAhCH,SAFF,EAoCE;AACE0C,4BAAkB,IADpB;AAEEC,iCAAuB,IAFzB;AAGEC,oBAAUpB,QAHZ;AAIEY,oBAAUnD,SAJZ;AAKEiB,2BAAiBpD;AALnB,SApCF;AA4CD,OA/OH,EAgPE,IAhPF;AAkPAb,qCACEc,YAAYM,EADd,EAEE,MAAM;AACJ,cAAM4B,YAAYnD,qBAAqBiB,YAAYM,EAAjC,CAAlB;AACA,eAAOxB,cAAcX,WAAWoF,SAAX,CAAqBrB,SAArB,CAAd,CAAP;AACD,OALH,EAME,IANF;;AASA,UAAI1B,gBAAJ,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,kCACEuB,iBAAiBF,EADnB,EAEE,MAAM;AACJ,gBAAM4B,YAAYnD,qBAAqBiB,YAAYM,EAAjC,CAAlB;AACA,iBAAO,IAAIb,WAAJ,CAAgByC,SAAhB,CAAP;AACD,SALH,EAME,IANF;AAQAhD,uCACEsB,iBAAiBF,EADnB,EAEE,MAAM;AACJ,gBAAMwF,iBAAiB9G,0BAA0BgB,YAAYM,EAAtC,CAAvB;AACA,iBAAO,IAAIb,WAAJ,CAAgBqG,cAAhB,CAAP;AACD,SALH,EAME,IANF;AAQD;AACF,KAvUD;AAwUA,WAAOzH,CAAP;AACD,GAjWD;AAkWD,C","file":"PgTablesPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nconst base64 = str => new Buffer(String(str)).toString(\"base64\");\n\nexport default (function PgTablesPlugin(builder, { pgInflection: inflection }) {\n  builder.hook(\"init\", (_, build) => {\n    const {\n      getNodeIdForTypeAndIdentifiers,\n      nodeIdFieldName,\n      newWithHooks,\n      pgSql: sql,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      getTypeByName,\n      pgGetGqlTypeByTypeId,\n      pgGetGqlInputTypeByTypeId,\n      pgRegisterGqlTypeByTypeId,\n      pgRegisterGqlInputTypeByTypeId,\n      pg2GqlMapper,\n      gql2pg,\n      graphql: {\n        GraphQLObjectType,\n        GraphQLNonNull,\n        GraphQLID,\n        GraphQLList,\n        GraphQLInputObjectType,\n      },\n      pgColumnFilter,\n    } = build;\n    const Cursor = getTypeByName(\"Cursor\");\n    introspectionResultsByKind.class.forEach(table => {\n      const tablePgType = introspectionResultsByKind.type.find(\n        type =>\n          type.type === \"c\" &&\n          type.category === \"C\" &&\n          type.namespaceId === table.namespaceId &&\n          type.classId === table.id\n      );\n      if (!tablePgType) {\n        throw new Error(\"Could not determine the type for this table\");\n      }\n      const arrayTablePgType = introspectionResultsByKind.type.find(\n        type => type.arrayItemTypeId === tablePgType.id\n      );\n      /*\n        table =\n          { kind: 'class',\n            id: '6484790',\n            name: 'bundle',\n            description: null,\n            namespaceId: '6484381',\n            typeId: '6484792',\n            isSelectable: true,\n            isInsertable: true,\n            isUpdatable: true,\n            isDeletable: true }\n        */\n      const primaryKeyConstraint = introspectionResultsByKind.constraint\n        .filter(con => con.classId === table.id)\n        .filter(con => con.type === \"p\")[0];\n      const primaryKeys =\n        primaryKeyConstraint &&\n        primaryKeyConstraint.keyAttributeNums.map(\n          num =>\n            introspectionResultsByKind.attributeByClassIdAndNum[table.id][num]\n        );\n      const attributes = introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === table.id)\n        .sort((a1, a2) => a1.num - a2.num);\n      const tableTypeName = inflection.tableType(\n        table.name,\n        table.namespaceName\n      );\n      const shouldHaveNodeId: boolean =\n        nodeIdFieldName &&\n        table.isSelectable &&\n        table.namespace &&\n        primaryKeys &&\n        primaryKeys.length\n          ? true\n          : false;\n      pgRegisterGqlTypeByTypeId(\n        tablePgType.id,\n        cb => {\n          if (pg2GqlMapper[tablePgType.id]) {\n            // Already handled\n            throw new Error(\n              `Register was called but there's already a mapper in place for '${\n                tablePgType.id\n              }'!`\n            );\n          }\n          const TableType = newWithHooks(\n            GraphQLObjectType,\n            {\n              description: table.description || tablePgType.description,\n              name: tableTypeName,\n              interfaces: () => {\n                if (shouldHaveNodeId) {\n                  return [getTypeByName(\"Node\")];\n                } else {\n                  return [];\n                }\n              },\n              fields: ({ addDataGeneratorForField, Self }) => {\n                const fields = {};\n                if (shouldHaveNodeId) {\n                  // Enable nodeId interface\n                  addDataGeneratorForField(nodeIdFieldName, () => {\n                    return {\n                      pgQuery: queryBuilder => {\n                        queryBuilder.select(\n                          sql.fragment`json_build_array(${sql.join(\n                            primaryKeys.map(\n                              key =>\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  key.name\n                                )}`\n                            ),\n                            \", \"\n                          )})`,\n                          \"__identifiers\"\n                        );\n                      },\n                    };\n                  });\n                  fields[nodeIdFieldName] = {\n                    description:\n                      \"A globally unique identifier. Can be used in various places throughout the system to identify this single value.\",\n                    type: new GraphQLNonNull(GraphQLID),\n                    resolve(data) {\n                      return (\n                        data.__identifiers &&\n                        getNodeIdForTypeAndIdentifiers(\n                          Self,\n                          ...data.__identifiers\n                        )\n                      );\n                    },\n                  };\n                }\n                return fields;\n              },\n            },\n            {\n              pgIntrospection: table,\n              isPgRowType: table.isSelectable,\n              isPgCompoundType: !table.isSelectable,\n            }\n          );\n          cb(TableType);\n          const pgInputFields = {};\n          newWithHooks(\n            GraphQLInputObjectType,\n            {\n              description: `An input for mutations affecting \\`${tableTypeName}\\``,\n              name: inflection.inputType(TableType),\n              fields: context => {\n                pg2GqlMapper[tablePgType.id] = {\n                  map: _ => _,\n                  unmap: obj => {\n                    return sql.fragment`row(${sql.join(\n                      attributes.map(attr => {\n                        if (!pgColumnFilter(attr, build, context)) {\n                          return sql.null; // TODO: return default instead.\n                        }\n                        const fieldName = inflection.column(\n                          attr.name,\n                          table.name,\n                          table.namespaceName\n                        );\n                        const pgInputField = pgInputFields[fieldName];\n                        const v = obj[fieldName];\n                        if (pgInputField && v != null) {\n                          const { type } = pgInputField;\n                          return sql.fragment`${gql2pg(\n                            v,\n                            type\n                          )}::${sql.identifier(type.namespaceName, type.name)}`;\n                        } else {\n                          return sql.null; // TODO: return default instead.\n                        }\n                      }),\n                      \",\"\n                    )})::${sql.identifier(\n                      tablePgType.namespaceName,\n                      tablePgType.name\n                    )}`;\n                  },\n                };\n                return {};\n              },\n            },\n            {\n              pgIntrospection: table,\n              isInputType: true,\n              isPgRowType: table.isSelectable,\n              isPgCompoundType: !table.isSelectable,\n              pgAddSubfield(fieldName, attrName, pgType, spec) {\n                pgInputFields[fieldName] = {\n                  name: attrName,\n                  type: pgType,\n                };\n                return spec;\n              },\n            }\n          );\n\n          if (table.isSelectable) {\n            /* const TablePatchType = */\n            newWithHooks(\n              GraphQLInputObjectType,\n              {\n                description: `Represents an update to a \\`${tableTypeName}\\`. Fields that are set will be updated.`,\n                name: inflection.patchType(TableType),\n              },\n              {\n                pgIntrospection: table,\n                isPgRowType: table.isSelectable,\n                isPgCompoundType: !table.isSelectable,\n                isPgPatch: true,\n                pgAddSubfield(fieldName, _attrName, _type, spec) {\n                  // We don't use this currently\n                  return spec;\n                },\n              }\n            );\n          }\n          const EdgeType = newWithHooks(\n            GraphQLObjectType,\n            {\n              description: `A \\`${tableTypeName}\\` edge in the connection.`,\n              name: inflection.edge(TableType.name),\n              fields: ({ fieldWithHooks, recurseDataGeneratorsForField }) => {\n                recurseDataGeneratorsForField(\"node\");\n                return {\n                  cursor: fieldWithHooks(\n                    \"cursor\",\n                    ({ addDataGenerator }) => {\n                      addDataGenerator(() => ({\n                        usesCursor: [true],\n                      }));\n                      return {\n                        description: \"A cursor for use in pagination.\",\n                        type: Cursor,\n                        resolve(data) {\n                          return (\n                            data.__cursor &&\n                            base64(JSON.stringify(data.__cursor))\n                          );\n                        },\n                      };\n                    },\n                    {\n                      isCursorField: true,\n                    }\n                  ),\n                  node: {\n                    description: `The \\`${tableTypeName}\\` at the end of the edge.`,\n                    type: new GraphQLNonNull(TableType),\n                    resolve(data) {\n                      return data;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isEdgeType: true,\n              isPgRowEdgeType: true,\n              nodeType: TableType,\n              pgIntrospection: table,\n            }\n          );\n          const PageInfo = getTypeByName(\"PageInfo\");\n          /*const ConnectionType = */\n          newWithHooks(\n            GraphQLObjectType,\n            {\n              description: `A connection to a list of \\`${tableTypeName}\\` values.`,\n              name: inflection.connection(TableType.name),\n              fields: ({ recurseDataGeneratorsForField }) => {\n                recurseDataGeneratorsForField(\"edges\");\n                recurseDataGeneratorsForField(\"nodes\");\n                recurseDataGeneratorsForField(\"pageInfo\");\n                return {\n                  nodes: {\n                    description: `A list of \\`${tableTypeName}\\` objects.`,\n                    type: new GraphQLNonNull(new GraphQLList(TableType)),\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                  edges: {\n                    description: `A list of edges which contains the \\`${tableTypeName}\\` and cursor to aid in pagination.`,\n                    type: new GraphQLNonNull(\n                      new GraphQLList(new GraphQLNonNull(EdgeType))\n                    ),\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                  pageInfo: PageInfo && {\n                    description: \"Information to aid in pagination.\",\n                    type: new GraphQLNonNull(PageInfo),\n                    resolve(data) {\n                      return data;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isConnectionType: true,\n              isPgRowConnectionType: true,\n              edgeType: EdgeType,\n              nodeType: TableType,\n              pgIntrospection: table,\n            }\n          );\n        },\n        true\n      );\n      pgRegisterGqlInputTypeByTypeId(\n        tablePgType.id,\n        () => {\n          const TableType = pgGetGqlTypeByTypeId(tablePgType.id);\n          return getTypeByName(inflection.inputType(TableType));\n        },\n        true\n      );\n\n      if (arrayTablePgType) {\n        // Note: these do not return\n        //\n        // `new GraphQLList(new GraphQLNonNull(...))`\n        //\n        // because it's possible to return null entries from postgresql\n        // functions. We should probably add a flag to instead export\n        // the non-null version as that's more typical.\n        pgRegisterGqlTypeByTypeId(\n          arrayTablePgType.id,\n          () => {\n            const TableType = pgGetGqlTypeByTypeId(tablePgType.id);\n            return new GraphQLList(TableType);\n          },\n          true\n        );\n        pgRegisterGqlInputTypeByTypeId(\n          arrayTablePgType.id,\n          () => {\n            const TableInputType = pgGetGqlInputTypeByTypeId(tablePgType.id);\n            return new GraphQLList(TableInputType);\n          },\n          true\n        );\n      }\n    });\n    return _;\n  });\n}: Plugin);\n"]}